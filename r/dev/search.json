[{"path":[]},{"path":"/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported project maintainers. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant homepage, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla‚Äôs code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"DoubleML - Contributing Guidelines ","title":"DoubleML - Contributing Guidelines ","text":"DoubleML community effort. Everyone welcome contribute. contributors adhere contributing guidelines code conduct. contributing guidelines particularly helpful get started first contribution.","code":""},{"path":"/dev/CONTRIBUTING.html","id":"submit-a-bug-report-bug","dir":"","previous_headings":"","what":"Submit a Bug Report üêõ","title":"DoubleML - Contributing Guidelines ","text":"submit bug report, can use issue template bug reports. good bug report contains minimum reproducible code snippet, like example State result expected result actually got. case exception full traceback appreciated. State versions code running following lines copy-paste result.","code":"library(DoubleML) library(mlr3) library(mlr3learners) library(data.table) set.seed(2) ml_g = lrn(\"regr.ranger\", num.trees = 10, max.depth = 2) ml_m = ml_g$clone() obj_dml_data = make_plr_CCDDHNR2018(alpha = 0.5) dml_plr_obj = DoubleMLPLR$new(obj_dml_data, ml_g, ml_m) dml_plr_obj$fit() dml_plr_obj$summary() sessionInfo() packageVersion('DoubleML') packageVersion('mlr3')"},{"path":"/dev/CONTRIBUTING.html","id":"submit-a-feature-request-bulb","dir":"","previous_headings":"","what":"Submit a Feature Request üí°","title":"DoubleML - Contributing Guidelines ","text":"welcome feature requests suggestions towards improving /extending DoubleML package. feature requests can use corresponding issue template.","code":""},{"path":"/dev/CONTRIBUTING.html","id":"submit-a-question-or-start-a-discussion","dir":"","previous_headings":"","what":"Submit a Question or Start a Discussion","title":"DoubleML - Contributing Guidelines ","text":"use GitHub Discussions give community platform asking questions DoubleML package discussions topics related package.","code":""},{"path":"/dev/CONTRIBUTING.html","id":"contribute-code-computer","dir":"","previous_headings":"","what":"Contribute Code üíª","title":"DoubleML - Contributing Guidelines ","text":"Everyone welcome contribute DoubleML code base. following guidelines hints help get started.","code":""},{"path":"/dev/CONTRIBUTING.html","id":"development-workflow","dir":"","previous_headings":"Contribute Code üíª","what":"Development Workflow","title":"DoubleML - Contributing Guidelines ","text":"following, recommended way contribute DoubleML described detail. just starting work Git GitHub, recommend read Happy Git GitHub useR chapter Git GitHub Hadley Wickham‚Äôs book R Packages. important steps : fork repo, add changes finally submit pull-request. 1. Fork DoubleML repo clicking Fork button (requires GitHub account). Clone fork local machine via Create feature branch via (Optionally) can add upstream remote. allows easily keep repository synch via Develop code changes. helpful resource package development R Hadley Wickham‚Äôs R Packages rOpenSci Packages. changes can added pushed via Generate pull request fork. Please follow guidelines pull requests. opening PR guided checklist.","code":"$ git clone git@github.com:YourGitHubAccount/doubleml-for-r.git $ cd doubleml-for-r $ git checkout -b my_feature_branch $ git remote add upstream https://github.com/DoubleML/doubleml-for-r.git $ git fetch upstream $ git merge upstream/main $ git add your_new_file your_modified_file $ git commit -m \"A commit message which briefly summarizes the changes made\" $ git push origin my_feature_branch"},{"path":"/dev/CONTRIBUTING.html","id":"checklist-for-pull-requests-pr","dir":"","previous_headings":"Contribute Code üíª","what":"Checklist for Pull Requests (PR)","title":"DoubleML - Contributing Guidelines ","text":"title pull request summarizes changes made. PR contains detailed description changes additions (may want comment diff GitHub). References related issues PRs added. code passes R CMD check (unit) tests. check code common problems, run default, runs tests. case want run tests, run add enhancements new feature, unit tests (certain level coverage) mandatory getting PR merged. Check whether changes adhere ‚Äúmlr-style‚Äù standards. check can use following code PR still work progress, please consider marking draft PR (see also ).","code":"devtools::check() devtools::test() require(styler) remotes::install_github(\"pat-s/styler@mlr-style\") styler::style_pkg(style = styler::mlr_style) # entire package styler::style_file(<file>, style = styler::mlr_style) # specific file"},{"path":"/dev/CONTRIBUTING.html","id":"unit-tests-and-test-coverage","dir":"","previous_headings":"Contribute Code üíª","what":"Unit Tests and Test Coverage","title":"DoubleML - Contributing Guidelines ","text":"use testthat package unit testing. Unit testing considered fundamental part development workflow. recommend read chapter testing Hadley Wickham‚Äôs book R Packages. tests located tests/testthat subfolder. test coverage determined covr package. Coverage reports package, PRs, branches etc. available codecov. mandatory equip new features appropriate level unit test coverage. run unit tests (option see devtools docu) call unit test coverage report can run , alternatively,","code":"devtools::test() covr::report() devtools::test_coverage()"},{"path":"/dev/CONTRIBUTING.html","id":"contribute-a-new-model-class","dir":"","previous_headings":"Contribute Code üíª","what":"Contribute a New Model Class","title":"DoubleML - Contributing Guidelines ","text":"DoubleML package particularly designed flexible way make easily extendable regard new model classes. Contributions direction much welcome, happy help authors integrate models DoubleML OOP structure. need assistance, just open issue contact one maintainers @MalteKurz @PhilippBach. abstract base class DoubleML implements core functionalities based linear Neyman orthogonal score function. contribute new model class, need specify nuisance functions need estimated new model class (e.g.¬†regressions classifications). Furthermore, score components Neyman orthogonal score function need implemented. functionality automatically available via inheritance abstract base class.","code":""},{"path":"/dev/CONTRIBUTING.html","id":"contribute-documentation-books","dir":"","previous_headings":"","what":"Contribute Documentation üìö","title":"DoubleML - Contributing Guidelines ","text":"documentation DoubleML generated roxygen2. corresponding website R API documentation generated using pkgdown hosted https://docs.doubleml.org/r/stable. website https:://docs.doubleml.org built sphinx. source code website, user guide, example gallery, etc. available separate repository https://github.com/DoubleML/doubleml-docs.","code":""},{"path":"/dev/CONTRIBUTING.html","id":"contribute-to-the-api-documentation","dir":"","previous_headings":"Contribute Documentation üìö","what":"Contribute to the API Documentation","title":"DoubleML - Contributing Guidelines ","text":"documentation DoubleML generated roxygen2. corresponding website R API documentation generated using pkgdown. build documentation package run build documentation website, run (details, see pkgdown documentation)","code":"devtools::document() pkgdown::build_site()"},{"path":"/dev/CONTRIBUTING.html","id":"contribute-to-the-user-guide-and-documentation","dir":"","previous_headings":"Contribute Documentation üìö","what":"Contribute to the User Guide and Documentation","title":"DoubleML - Contributing Guidelines ","text":"documentation DoubleML hosted https://docs.doubleml.org. source code website, user guide, example gallery, etc. available separate repository doubleml-docs. Changes, issues PRs documentation (except API documentation) discussed doubleml-docs repo. welcome contributions user guide, especially case studies example gallery. step--step guide contributions example gallery available .","code":""},{"path":"/dev/PULL_REQUEST_TEMPLATE.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"NA","text":"Please describe changes additions. addition, may want comment diff GitHub.","code":""},{"path":"/dev/PULL_REQUEST_TEMPLATE.html","id":"reference-to-issues-or-prs","dir":"","previous_headings":"","what":"Reference to Issues or PRs","title":"NA","text":"Add references related issues PRs .","code":""},{"path":"/dev/PULL_REQUEST_TEMPLATE.html","id":"comments","dir":"","previous_headings":"","what":"Comments","title":"NA","text":"can add comments. can also delete section, necessary.","code":""},{"path":"/dev/PULL_REQUEST_TEMPLATE.html","id":"pr-checklist","dir":"","previous_headings":"","what":"PR Checklist","title":"NA","text":"Please fill PR checklist (see contributing guidelines details). title pull request summarizes changes made. PR contains detailed description changes additions. References related issues PRs added. code passes R CMD check (unit) tests (see contributing guidelines details). Enhancements new feature equipped unit tests. changes adhere ‚Äúmlr-style‚Äù standards (see contributing guidelines details).","code":""},{"path":"/dev/articles/Introduction_to_DoubleML.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DoubleML - An Object-Oriented Implementation of Double Machine Learning in R","text":"R package DoubleML implements double/debiased machine learning framework Chernozhukov et al.¬†(2018). provides functionalities estimate parameters causal models based machine learning methods. double machine learning framework consist three key ingredients: Neyman orthogonality, High-quality machine learning estimation Sample splitting. Estimation nuisance components can performed various state---art machine learning methods available mlr3 ecosystem (Lang et al., 2019). DoubleML makes possible perform inference variety causal models, including partially linear interactive regression models extensions instrumental variable estimation. object-oriented implementation DoubleML enables high flexibility model specification makes easily extendable. paper serves introduction double machine learning framework R package DoubleML. reproducible code examples simulated real data sets, demonstrate DoubleML users can perform valid inference based machine learning methods.","code":""},{"path":"/dev/articles/Introduction_to_DoubleML.html","id":"long-package-vignette","dir":"Articles","previous_headings":"","what":"Long Package Vignette","title":"DoubleML - An Object-Oriented Implementation of Double Machine Learning in R","text":"long version package vignette available preprint via arxiv:2103.09603","code":""},{"path":"/dev/articles/Introduction_to_DoubleML.html","id":"references","dir":"Articles","previous_headings":"","what":"References:","title":"DoubleML - An Object-Oriented Implementation of Double Machine Learning in R","text":"Bach, P., Chernozhukov, V., Kurz, M. S., Spindler, M. (2021), DoubleML - Object-Oriented Implementation Double Machine Learning R, arXiv:2103.09603. Chernozhukov, V., Chetverikov, D., Demirer, M., Duflo, E., Hansen, C., Newey, W. Robins, J. (2018), Double/debiased machine learning treatment structural parameters. Econometrics Journal, 21: C1-C68, URL: https://doi.org/10.1111/ectj.12097. Lang, M., Binder, M., Richter, J., Schratz, P., Pfisterer, F., Coors, S., Au, Q., Casalicchio, G., Kotthoff, L. Bischl, B. (2019), mlr3: modern object-oriented machine learing framework R. Journal Open Source Software, https://doi.org/10.21105/joss.01903, URL: https://mlr3.mlr-org.com/.","code":""},{"path":"/dev/articles/getstarted.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with DoubleML","text":"DoubleML package R can downloaded using (requires previous installation remotes package). Load package completed installation. python package DoubleML available via github repository. information, please visit user guide.","code":"remotes::install_github(\"DoubleML/doubleml-for-r\") library(DoubleML)"},{"path":"/dev/articles/getstarted.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Getting Started with DoubleML","text":"case study download Bonus data set Pennsylvania Reemployment Bonus experiment second example simulate data partially linear regression model.","code":"library(DoubleML)  # Load bonus data df_bonus = fetch_bonus(return_type=\"data.table\") head(df_bonus) ##    inuidur1 female black othrace dep1 dep2 q2 q3 q4 q5 q6 agelt35 agegt54 ## 1: 2.890372      0     0       0    0    1  0  0  0  1  0       0       0 ## 2: 0.000000      0     0       0    0    0  0  0  0  1  0       0       0 ## 3: 3.295837      0     0       0    0    0  0  0  1  0  0       0       0 ## 4: 2.197225      0     0       0    0    0  0  1  0  0  0       1       0 ## 5: 3.295837      0     0       0    1    0  0  0  0  1  0       0       1 ## 6: 3.295837      1     0       0    0    0  0  0  0  1  0       0       1 ##    durable lusd husd tg ## 1:       0    0    1  0 ## 2:       0    1    0  0 ## 3:       0    1    0  0 ## 4:       0    0    0  1 ## 5:       1    1    0  0 ## 6:       0    1    0  0 # Simulate data set.seed(3141) n_obs = 500 n_vars = 100 theta = 3 X = matrix(rnorm(n_obs*n_vars), nrow=n_obs, ncol=n_vars) d = X[,1:3]%*%c(5,5,5) + rnorm(n_obs) y = theta*d + X[, 1:3]%*%c(5,5,5) + rnorm(n_obs)"},{"path":"/dev/articles/getstarted.html","id":"the-causal-model","dir":"Articles","previous_headings":"","what":"The causal model","title":"Getting Started with DoubleML","text":"\\[\\begin{align*} Y = D \\theta_0 + g_0(X) + \\zeta, & &\\mathbb{E}(\\zeta | D,X) = 0, \\\\ D = m_0(X) + V, & &\\mathbb{E}(V | X) = 0, \\end{align*}\\] \\(Y\\) outcome variable \\(D\\) policy variable interest. high-dimensional vector \\(X = (X_1, \\ldots, X_p)\\) consists confounding covariates, \\(\\zeta\\) \\(V\\) stochastic errors.","code":""},{"path":"/dev/articles/getstarted.html","id":"the-data-backend-doublemldata","dir":"Articles","previous_headings":"","what":"The data-backend DoubleMLData","title":"Getting Started with DoubleML","text":"DoubleML provides interfaces objects class data.table well R base classes data.frame matrix. Details data-backend interfaces can found user guide. DoubleMLData class serves data-backend can initialized dataframe specifying column y_col=\"inuidur1\" serving outcome variable \\(Y\\), column(s) d_cols = \"tg\" serving treatment variable \\(D\\) columns x_cols=c(\"female\", \"black\", \"othrace\", \"dep1\", \"dep2\", \"q2\", \"q3\", \"q4\", \"q5\", \"q6\", \"agelt35\", \"agegt54\", \"durable\", \"lusd\", \"husd\") specifying confounders. Alternatively matrix interface can used shown simulated data.","code":"# Specify the data and variables for the causal model dml_data_bonus = DoubleMLData$new(df_bonus,                              y_col = \"inuidur1\",                              d_cols = \"tg\",                              x_cols = c(\"female\", \"black\", \"othrace\", \"dep1\", \"dep2\",                                         \"q2\", \"q3\", \"q4\", \"q5\", \"q6\", \"agelt35\", \"agegt54\",                                           \"durable\", \"lusd\", \"husd\")) print(dml_data_bonus) ## ================= DoubleMLData Object ================== ##  ##  ## ------------------ Data summary      ------------------ ## Outcome variable: inuidur1 ## Treatment variable(s): tg ## Covariates: female, black, othrace, dep1, dep2, q2, q3, q4, q5, q6, agelt35, agegt54, durable, lusd, husd ## Instrument(s):  ## No. Observations: 5099 # matrix interface to DoubleMLData dml_data_sim = double_ml_data_from_matrix(X = X, y = y, d = d) dml_data_sim ## ================= DoubleMLData Object ================== ##  ##  ## ------------------ Data summary      ------------------ ## Outcome variable: y ## Treatment variable(s): d ## Covariates: X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62, X63, X64, X65, X66, X67, X68, X69, X70, X71, X72, X73, X74, X75, X76, X77, X78, X79, X80, X81, X82, X83, X84, X85, X86, X87, X88, X89, X90, X91, X92, X93, X94, X95, X96, X97, X98, X99, X100 ## Instrument(s):  ## No. Observations: 500"},{"path":"/dev/articles/getstarted.html","id":"learners-to-estimate-the-nuisance-models","dir":"Articles","previous_headings":"","what":"Learners to estimate the nuisance models","title":"Getting Started with DoubleML","text":"estimate partially linear regression (PLR) model double machine learning algorithm, first specify machine learners estimate \\(m_0\\) \\(g_0\\). bonus data use random forest regression model simulated data sparse partially linear model use Lasso regression model. implementation DoubleML based meta-packages mlr3 R. details specification learners hyperparameters refer user guide Learners, hyperparameters hyperparameter tuning.","code":"library(mlr3) library(mlr3learners) # surpress messages from mlr3 package during fitting lgr::get_logger(\"mlr3\")$set_threshold(\"warn\")  learner = lrn(\"regr.ranger\", num.trees = 500, max.depth = 5, min.node.size = 2) ml_l_bonus = learner$clone() ml_m_bonus = learner$clone()  learner = lrn(\"regr.glmnet\", lambda = sqrt(log(n_vars)/(n_obs))) ml_l_sim = learner$clone() ml_m_sim = learner$clone()"},{"path":"/dev/articles/getstarted.html","id":"cross-fitting-dml-algorithms-and-neyman-orthogonal-score-functions","dir":"Articles","previous_headings":"","what":"Cross-fitting, DML algorithms and Neyman-orthogonal score functions","title":"Getting Started with DoubleML","text":"initializing object PLR models DoubleMLPLR, can set parameters specifying resampling: number folds used cross-fitting n_folds (defaults n_folds = 5) well number repetitions applying repeated cross-fitting n_rep (defaults n_rep = 1). Additionally, one can choose algorithms \"dml1\" \"dml2\" via dml_procedure (defaults \"dml2\"). Depending causal model, one can choose different Neyman-orthogonal score / moment functions. PLR model default score \"partialling \", .e., \\[\\begin{align}\\begin{aligned}\\psi(W; \\theta, \\eta) &:= [Y - \\ell(X) - \\theta (D - m(X))] [D - m(X)].\\end{aligned}\\end{align}\\] Note score, estimate \\(g_0(X)\\) directly, conditional expectation \\(Y\\) given \\(X\\), \\(\\ell_0(X) = E[Y|X]\\). user guide provides details Sample-splitting, cross-fitting repeated cross-fitting, Double machine learning algorithms Score functions","code":""},{"path":"/dev/articles/getstarted.html","id":"estimate-doubledebiased-machine-learning-models","dir":"Articles","previous_headings":"","what":"Estimate double/debiased machine learning models","title":"Getting Started with DoubleML","text":"now initialize DoubleMLPLR objects examples using default parameters. models estimated calling fit() method can example inspect estimated treatment effect using summary() method. detailed result summary can obtained via print() method. Besides fit() method DoubleML model classes also provide functionalities perform statistical inference like bootstrap(), confint() p_adjust(), details see user guide Variance estimation, confidence intervals boostrap standard errors.","code":"set.seed(3141) obj_dml_plr_bonus = DoubleMLPLR$new(dml_data_bonus, ml_l = ml_l_bonus, ml_m = ml_m_bonus) obj_dml_plr_bonus$fit() print(obj_dml_plr_bonus) ## ================= DoubleMLPLR Object ================== ##  ##  ## ------------------ Data summary      ------------------ ## Outcome variable: inuidur1 ## Treatment variable(s): tg ## Covariates: female, black, othrace, dep1, dep2, q2, q3, q4, q5, q6, agelt35, agegt54, durable, lusd, husd ## Instrument(s):  ## No. Observations: 5099 ##  ## ------------------ Score & algorithm ------------------ ## Score function: partialling out ## DML algorithm: dml2 ##  ## ------------------ Machine learner   ------------------ ## ml_l: regr.ranger ## ml_m: regr.ranger ##  ## ------------------ Resampling        ------------------ ## No. folds: 5 ## No. repeated sample splits: 1 ## Apply cross-fitting: TRUE ##  ## ------------------ Fit summary       ------------------ ##  Estimates and significance testing of the effect of target variables ##    Estimate. Std. Error t value Pr(>|t|)   ## tg  -0.07561    0.03536  -2.139   0.0325 * ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 obj_dml_plr_sim = DoubleMLPLR$new(dml_data_sim, ml_l = ml_l_sim, ml_m = ml_m_sim) obj_dml_plr_sim$fit() print(obj_dml_plr_sim) ## ================= DoubleMLPLR Object ================== ##  ##  ## ------------------ Data summary      ------------------ ## Outcome variable: y ## Treatment variable(s): d ## Covariates: X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14, X15, X16, X17, X18, X19, X20, X21, X22, X23, X24, X25, X26, X27, X28, X29, X30, X31, X32, X33, X34, X35, X36, X37, X38, X39, X40, X41, X42, X43, X44, X45, X46, X47, X48, X49, X50, X51, X52, X53, X54, X55, X56, X57, X58, X59, X60, X61, X62, X63, X64, X65, X66, X67, X68, X69, X70, X71, X72, X73, X74, X75, X76, X77, X78, X79, X80, X81, X82, X83, X84, X85, X86, X87, X88, X89, X90, X91, X92, X93, X94, X95, X96, X97, X98, X99, X100 ## Instrument(s):  ## No. Observations: 500 ##  ## ------------------ Score & algorithm ------------------ ## Score function: partialling out ## DML algorithm: dml2 ##  ## ------------------ Machine learner   ------------------ ## ml_l: regr.glmnet ## ml_m: regr.glmnet ##  ## ------------------ Resampling        ------------------ ## No. folds: 5 ## No. repeated sample splits: 1 ## Apply cross-fitting: TRUE ##  ## ------------------ Fit summary       ------------------ ##  Estimates and significance testing of the effect of target variables ##   Estimate. Std. Error t value Pr(>|t|)     ## d   2.98094    0.05871   50.78   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"/dev/articles/install.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Installing DoubleML","text":"Please note current version DoubleML package R still development code might subject changes.","code":""},{"path":"/dev/articles/install.html","id":"installation-from-cran","dir":"Articles","previous_headings":"Installation","what":"Installation from CRAN","title":"Installing DoubleML","text":"installation CRAN type Load package completed installation.","code":"install.packages(\"DoubleML\") library(DoubleML)"},{"path":"/dev/articles/install.html","id":"installation-from-github","dir":"Articles","previous_headings":"Installation","what":"Installation from GitHub","title":"Installing DoubleML","text":"DoubleML package R can downloaded using (previous installation remotes package required). Load package completed installation. python package DoubleML available via github repository. information, please visit user guide.","code":"remotes::install_github(\"DoubleML/doubleml-for-r\") library(DoubleML)"},{"path":"/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philipp Bach. Author, maintainer. Victor Chernozhukov. Author. Malte S. Kurz. Author. Martin Spindler. Author. Klaassen Sven. Author.","code":""},{"path":"/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bach, P., Chernozhukov, V., Kurz, M. S., Spindler, M. (2021), DoubleML - Object-Oriented Implementation Double Machine Learning R, arXiv:2103.09603.","code":"@Misc{DoubleML2021,   title = {{DoubleML} -- {A}n Object-Oriented Implementation of Double Machine Learning in {R}},   author = {P. Bach and V. Chernozhukov and M. S. Kurz and M. Spindler},   year = {2021},   eprint = {2103.09603},   archiveprefix = {arXiv},   primaryclass = {stat.ML},   note = {arXiv:\\href{https://arxiv.org/abs/2103.09603}{2103.09603} [stat.ML]}, }"},{"path":"/dev/index.html","id":"doubleml---double-machine-learning-in-r-","dir":"","previous_headings":"","what":"DoubleML - Double Machine Learning with R","title":"DoubleML - Double Machine Learning with R","text":"R package DoubleML provides implementation double / debiased machine learning framework Chernozhukov et al.¬†(2018). built top mlr3 mlr3 ecosystem (Lang et al., 2019). Note R package developed together python twin based scikit-learn. python package also available GitHub .","code":""},{"path":"/dev/index.html","id":"documentation-and-maintenance","dir":"","previous_headings":"","what":"Documentation and maintenance","title":"DoubleML - Double Machine Learning with R","text":"Documentation functions R: https://docs.doubleml.org/r/stable/reference/index.html User guide: https://docs.doubleml.org DoubleML currently maintained @PhilippBach @SvenKlaassen.","code":""},{"path":"/dev/index.html","id":"main-features","dir":"","previous_headings":"","what":"Main Features","title":"DoubleML - Double Machine Learning with R","text":"Double / debiased machine learning framework Chernozhukov et al.¬†(2018) Partially linear regression models (PLR) Partially linear IV regression models (PLIV) Interactive regression models (IRM) Interactive IV regression models (IIVM) object-oriented implementation DoubleML based R6 package R flexible. model classes DoubleMLPLR, DoubleMLPLIV, DoubleMLIRM DoubleIIVM implement estimation nuisance functions via machine learning methods computation Neyman orthogonal score function. functionalities implemented abstract base class DoubleML. particular functionalities estimate double machine learning models perform statistical inference via methods fit, bootstrap, confint, p_adjust tune. object-oriented implementation allows high flexibility model specification terms ‚Ä¶ ‚Ä¶ machine learning methods estimation nuisance functions, ‚Ä¶ resampling schemes, ‚Ä¶ double machine learning algorithm, ‚Ä¶ Neyman orthogonal score functions, ‚Ä¶ can readily extended regards ‚Ä¶ new model classes come Neyman orthogonal score functions linear target parameter, ‚Ä¶ alternative score functions via callables, ‚Ä¶ alternative resampling schemes, ‚Ä¶ OOP structure DoubleML package","code":""},{"path":"/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"DoubleML - Double Machine Learning with R","text":"Install latest release CRAN: Install development version GitHub: DoubleML requires R (>= 3.5.0) R6 (>= 2.4.1) data.table (>= 1.12.8) stats checkmate mlr3 (>= 0.5.0) mlr3tuning (>= 0.3.0) mlr3learners (>= 0.3.0) mvtnorm utils clusterGeneration readstata13","code":"remotes::packages(\"DoubleML\") remotes::install_github(\"DoubleML/doubleml-for-r\")"},{"path":"/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"DoubleML - Double Machine Learning with R","text":"DoubleML community effort. Everyone welcome contribute. get started first contribution recommend reading contributing guidelines code conduct.","code":""},{"path":"/dev/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"DoubleML - Double Machine Learning with R","text":"use DoubleML package citation highly appreciated: Bach, P., Chernozhukov, V., Kurz, M. S., Spindler, M. (2021), DoubleML - Object-Oriented Implementation Double Machine Learning R, arXiv:2103.09603. Bibtex-entry:","code":"@misc{DoubleML2020,       title={{DoubleML} -- {A}n Object-Oriented Implementation of Double Machine Learning in {R}},        author={P. Bach and V. Chernozhukov and M. S. Kurz and M. Spindler},       year={2021},       eprint={2103.09603},       archivePrefix={arXiv},       primaryClass={stat.ML},       note={arXiv:\\href{https://arxiv.org/abs/2103.09603}{2103.09603} [stat.ML]} }"},{"path":"/dev/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"DoubleML - Double Machine Learning with R","text":"Funding Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) acknowledged ‚Äì Project Number 431701914.","code":""},{"path":"/dev/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"DoubleML - Double Machine Learning with R","text":"Bach, P., Chernozhukov, V., Kurz, M. S., Spindler, M. (2021), DoubleML - Object-Oriented Implementation Double Machine Learning R, arXiv:2103.09603. Chernozhukov, V., Chetverikov, D., Demirer, M., Duflo, E., Hansen, C., Newey, W. Robins, J. (2018), Double/debiased machine learning treatment structural parameters. Econometrics Journal, 21: C1-C68, https://doi.org/10.1111/ectj.12097. Lang, M., Binder, M., Richter, J., Schratz, P., Pfisterer, F., Coors, S., Au, Q., Casalicchio, G., Kotthoff, L., Bischl, B. (2019), mlr3: modern object-oriented machine learing framework R. Journal Open Source Software, https://doi.org/10.21105/joss.01903.","code":""},{"path":"/dev/reference/DoubleML.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract class DoubleML ‚Äî DoubleML","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Abstract base class initialized.","code":""},{"path":"/dev/reference/DoubleML.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Abstract class DoubleML ‚Äî DoubleML","text":"R6::R6Class object.","code":""},{"path":[]},{"path":"/dev/reference/DoubleML.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Abstract class DoubleML ‚Äî DoubleML","text":"all_coef (matrix())  Estimates causal parameter(s) n_rep different sample splits calling fit(). all_dml1_coef (array())  Estimates causal parameter(s) n_rep different sample splits calling fit() dml_procedure = \"dml1\". all_se (matrix())  Standard errors causal parameter(s) n_rep different sample splits calling fit(). apply_cross_fitting (logical(1))  Indicates whether cross-fitting applied. Default TRUE. boot_coef (matrix())  Bootstrapped coefficients causal parameter(s) calling fit() bootstrap(). boot_t_stat (matrix())  Bootstrapped t-statistics causal parameter(s) calling fit() bootstrap(). coef (numeric())  Estimates causal parameter(s) calling fit(). data (data.table) Data object. dml_procedure (character(1))  character() (\"dml1\" \"dml2\") specifying double machine learning algorithm. Default \"dml2\". draw_sample_splitting (logical(1))  Indicates whether sample splitting drawn initialization object. Default TRUE. learner (named list())  machine learners nuisance functions. n_folds (integer(1))  Number folds. Default 5. n_rep (integer(1))  Number repetitions sample splitting. Default 1. params (named list())  hyperparameters learners. psi (array())  Value score function \\(\\psi(W;\\theta, \\eta)=\\psi_a(W;\\eta) \\theta + \\psi_b (W; \\eta)\\) calling fit(). psi_a (array())  Value score function component \\(\\psi_a(W;\\eta)\\) calling fit(). psi_b (array())  Value score function component \\(\\psi_b(W;\\eta)\\) calling fit(). predictions (array())  Predictions nuisance models calling fit(store_predictions=TRUE). models (array())  fitted nuisance models calling fit(store_models=TRUE). pval (numeric())  p-values causal parameter(s) calling fit(). score (character(1), function())  character(1) function() specifying score function. se (numeric())  Standard errors causal parameter(s) calling fit(). smpls (list())  partition used cross-fitting. smpls_cluster (list())  partition clusters used cross-fitting. t_stat (numeric())  t-statistics causal parameter(s) calling fit(). tuning_res (named list())  Results hyperparameter tuning.","code":""},{"path":[]},{"path":"/dev/reference/DoubleML.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Abstract class DoubleML ‚Äî DoubleML","text":"DoubleML$new() DoubleML$print() DoubleML$fit() DoubleML$bootstrap() DoubleML$split_samples() DoubleML$set_sample_splitting() DoubleML$tune() DoubleML$summary() DoubleML$confint() DoubleML$learner_names() DoubleML$params_names() DoubleML$set_ml_nuisance_params() DoubleML$p_adjust() DoubleML$get_params() DoubleML$clone()","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"DoubleML abstract class initialized.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$new()"},{"path":"/dev/reference/DoubleML.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Print DoubleML objects.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$print()"},{"path":"/dev/reference/DoubleML.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Estimate DoubleML models.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$fit(store_predictions = FALSE, store_models = FALSE)"},{"path":"/dev/reference/DoubleML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"store_predictions (logical(1))  Indicates whether predictions nuisance functions stored field predictions. Default FALSE. store_models (logical(1))  Indicates whether fitted models nuisance functions stored field models want analyze models extract information like variable importance. Default FALSE.","code":""},{"path":"/dev/reference/DoubleML.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"self","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-bootstrap-","dir":"Reference","previous_headings":"","what":"Method bootstrap()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Multiplier bootstrap DoubleML models.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$bootstrap(method = \"normal\", n_rep_boot = 500)"},{"path":"/dev/reference/DoubleML.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"method (character(1))  character(1) (\"Bayes\", \"normal\" \"wild\") specifying multiplier bootstrap method. n_rep_boot (integer(1))  number bootstrap replications.","code":""},{"path":"/dev/reference/DoubleML.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"self","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-split-samples-","dir":"Reference","previous_headings":"","what":"Method split_samples()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Draw sample splitting DoubleML models. samples drawn according attributes n_folds, n_rep apply_cross_fitting.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$split_samples()"},{"path":"/dev/reference/DoubleML.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"self","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-set-sample-splitting-","dir":"Reference","previous_headings":"","what":"Method set_sample_splitting()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Set sample splitting DoubleML models. attributes n_folds n_rep derived provided partition.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$set_sample_splitting(smpls)"},{"path":"/dev/reference/DoubleML.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"smpls (list())  nested list(). outer lists needs provide entry per repeated sample splitting (length list set n_rep). inner list named list() names train_ids test_ids. entries train_ids test_ids must partitions per fold (length train_ids test_ids set n_folds).","code":""},{"path":"/dev/reference/DoubleML.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"self","code":""},{"path":"/dev/reference/DoubleML.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"library(DoubleML) library(mlr3) set.seed(2) obj_dml_data = make_plr_CCDDHNR2018(n_obs=10) dml_plr_obj = DoubleMLPLR$new(obj_dml_data,                               lrn(\"regr.rpart\"), lrn(\"regr.rpart\"))  # simple sample splitting with two folds and without cross-fitting smpls = list(list(train_ids = list(c(1, 2, 3, 4, 5)),                   test_ids = list(c(6, 7, 8, 9, 10)))) dml_plr_obj$set_sample_splitting(smpls)  # sample splitting with two folds and cross-fitting but no repeated cross-fitting smpls = list(list(train_ids = list(c(1, 2, 3, 4, 5), c(6, 7, 8, 9, 10)),                   test_ids = list(c(6, 7, 8, 9, 10), c(1, 2, 3, 4, 5)))) dml_plr_obj$set_sample_splitting(smpls)  # sample splitting with two folds and repeated cross-fitting with n_rep = 2 smpls = list(list(train_ids = list(c(1, 2, 3, 4, 5), c(6, 7, 8, 9, 10)),                   test_ids = list(c(6, 7, 8, 9, 10), c(1, 2, 3, 4, 5))),              list(train_ids = list(c(1, 3, 5, 7, 9), c(2, 4, 6, 8, 10)),                   test_ids = list(c(2, 4, 6, 8, 10), c(1, 3, 5, 7, 9)))) dml_plr_obj$set_sample_splitting(smpls)"},{"path":"/dev/reference/DoubleML.html","id":"method-tune-","dir":"Reference","previous_headings":"","what":"Method tune()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Hyperparameter-tuning DoubleML models. hyperparameter-tuning performed using tuning methods provided mlr3tuning package. information tuning mlr3, refer section parameter tuning mlr3 book.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$tune(   param_set,   tune_settings = list(n_folds_tune = 5, rsmp_tune = mlr3::rsmp(\"cv\", folds = 5), measure     = NULL, terminator = mlr3tuning::trm(\"evals\", n_evals = 20), algorithm =     mlr3tuning::tnr(\"grid_search\"), resolution = 5),   tune_on_folds = FALSE )"},{"path":"/dev/reference/DoubleML.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"param_set (named list())  named list parameter grid nuisance model/learner (see method learner_names()). parameter grid must object class ParamSet. tune_settings (named list())  named list() arguments passed hyperparameter-tuning mlr3tuning set TuningInstance objects. tune_settings entries terminator (Terminator)  Terminator object. Specification terminator required perform tuning. algorithm (Tuner character(1))  Tuner object (recommended) key passed respective dictionary specify tuning algorithm used tnr(). algorithm passed argument tnr(). algorithm specified users, default set \"grid_search\". set \"grid_search\", additional argument \"resolution\" required. rsmp_tune (Resampling character(1)) Resampling object (recommended) option passed rsmp() initialize Resampling parameter tuning mlr3. specified user, default set \"cv\" (cross-validation). n_folds_tune (integer(1), optional)  rsmp_tune = \"cv\", number folds used cross-validation. specified user, default set 5. measure (NULL, named list(), optional)  Named list containing measures used parameter tuning. Entries list must either Measure objects keys passed passed msr(). names entries must match learner names (see method learner_names()). set NULL, default measures used, .e., \"regr.mse\" continuous outcome variables \"classif.ce\" binary outcomes. resolution (character(1))  key passed respective dictionary specify  tuning algorithm used tnr(). resolution passed argument tnr(). tune_on_folds (logical(1))  Indicates whether tuning done fold-specific globally. Default FALSE.","code":""},{"path":"/dev/reference/DoubleML.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"self","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Summary DoubleML models calling fit().","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$summary(digits = max(3L, getOption(\"digits\") - 3L))"},{"path":"/dev/reference/DoubleML.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"digits (integer(1))  number significant digits use printing.","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-confint-","dir":"Reference","previous_headings":"","what":"Method confint()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Confidence intervals DoubleML models.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$confint(parm, joint = FALSE, level = 0.95)"},{"path":"/dev/reference/DoubleML.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"parm (numeric() character())  specification parameters given confidence intervals among variables inference done, either vector numbers vector names. missing, parameters considered (default). joint (logical(1))  Indicates whether joint confidence intervals computed. Default FALSE. level (numeric(1))  confidence level. Default 0.95.","code":""},{"path":"/dev/reference/DoubleML.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"matrix() confidence interval(s).","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-learner-names-","dir":"Reference","previous_headings":"","what":"Method learner_names()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Returns names learners.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$learner_names()"},{"path":"/dev/reference/DoubleML.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"character() names learners.","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-params-names-","dir":"Reference","previous_headings":"","what":"Method params_names()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Returns names nuisance models hyperparameters.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$params_names()"},{"path":"/dev/reference/DoubleML.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"character() names nuisance models hyperparameters.","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-set-ml-nuisance-params-","dir":"Reference","previous_headings":"","what":"Method set_ml_nuisance_params()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Set hyperparameters nuisance models DoubleML models. Note current implementation, either parameters set globally parameters provided fold-specific.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$set_ml_nuisance_params(   learner = NULL,   treat_var = NULL,   params,   set_fold_specific = FALSE )"},{"path":"/dev/reference/DoubleML.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"learner (character(1))  nuisance model/learner (see method params_names). treat_var (character(1))  treatment varaible (hyperparameters can set treatment-variable specific). params (named list())  named list() estimator parameters. Parameters used folds default. Alternatively, parameters can passed fold-specific way option  fold_specificis TRUE. case, outer list needs length n_rep inner list length n_folds. set_fold_specific (logical(1))  Indicates parameters passed params passed fold-specific way. Default FALSE. TRUE, outer list needs length n_rep inner list length n_folds. Note current implementation, either parameters set globally parameters provided fold-specific.","code":""},{"path":"/dev/reference/DoubleML.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"self","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-p-adjust-","dir":"Reference","previous_headings":"","what":"Method p_adjust()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Multiple testing adjustment DoubleML models.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$p_adjust(method = \"romano-wolf\", return_matrix = TRUE)"},{"path":"/dev/reference/DoubleML.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"method (character(1))  character(1)(\"romano-wolf\", \"bonferroni\", \"holm\", etc) specifying adjustment method. addition \"romano-wolf\", methods implemented p.adjust() can applied. Default \"romano-wolf\". return_matrix (logical(1))  Indicates output returned matrix corresponding coefficient names.","code":""},{"path":"/dev/reference/DoubleML.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"numeric() adjusted p-values. return_matrix = TRUE, matrix() adjusted p_values.","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-get-params-","dir":"Reference","previous_headings":"","what":"Method get_params()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"Get hyperparameters nuisance model DoubleML models.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$get_params(learner)"},{"path":"/dev/reference/DoubleML.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"learner (character(1))  nuisance model/learner (see method params_names())","code":""},{"path":"/dev/reference/DoubleML.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Abstract class DoubleML ‚Äî DoubleML","text":"named list()paramers nuisance model/learner.","code":""},{"path":"/dev/reference/DoubleML.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Abstract class DoubleML ‚Äî DoubleML","text":"objects class cloneable method.","code":""},{"path":"/dev/reference/DoubleML.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"DoubleML$clone(deep = FALSE)"},{"path":"/dev/reference/DoubleML.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract class DoubleML ‚Äî DoubleML","text":"deep Whether make deep clone.","code":""},{"path":"/dev/reference/DoubleML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abstract class DoubleML ‚Äî DoubleML","text":"","code":"## ------------------------------------------------ ## Method `DoubleML$set_sample_splitting` ## ------------------------------------------------  library(DoubleML) library(mlr3) set.seed(2) obj_dml_data = make_plr_CCDDHNR2018(n_obs=10) dml_plr_obj = DoubleMLPLR$new(obj_dml_data,                               lrn(\"regr.rpart\"), lrn(\"regr.rpart\"))  # simple sample splitting with two folds and without cross-fitting smpls = list(list(train_ids = list(c(1, 2, 3, 4, 5)),                   test_ids = list(c(6, 7, 8, 9, 10)))) dml_plr_obj$set_sample_splitting(smpls)  # sample splitting with two folds and cross-fitting but no repeated cross-fitting smpls = list(list(train_ids = list(c(1, 2, 3, 4, 5), c(6, 7, 8, 9, 10)),                   test_ids = list(c(6, 7, 8, 9, 10), c(1, 2, 3, 4, 5)))) dml_plr_obj$set_sample_splitting(smpls)  # sample splitting with two folds and repeated cross-fitting with n_rep = 2 smpls = list(list(train_ids = list(c(1, 2, 3, 4, 5), c(6, 7, 8, 9, 10)),                   test_ids = list(c(6, 7, 8, 9, 10), c(1, 2, 3, 4, 5))),              list(train_ids = list(c(1, 3, 5, 7, 9), c(2, 4, 6, 8, 10)),                   test_ids = list(c(2, 4, 6, 8, 10), c(1, 3, 5, 7, 9)))) dml_plr_obj$set_sample_splitting(smpls)"},{"path":"/dev/reference/DoubleMLClusterData.html","id":null,"dir":"Reference","previous_headings":"","what":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"Double machine learning data-backend data cluster variables. DoubleMLClusterData objects can initialized data.table. Alternatively DoubleML provides functions initialize collection matrix objects data.frame. following functions can used create new instance DoubleMLClusterData. DoubleMLClusterData$new() initialization data.table. double_ml_data_from_matrix() initialization matrix objects, double_ml_data_from_data_frame() initialization data.frame.","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"DoubleML::DoubleMLData -> DoubleMLClusterData","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"cluster_cols (character()) cluster variable(s). x_cols (NULL, character())  covariates. NULL, variables (columns data) neither specified outcome variable y_col, treatment variables d_cols, instrumental variables z_cols, cluster variables cluster_cols used covariates. Default NULL. n_cluster_vars (integer(1))  number cluster variables.","code":""},{"path":[]},{"path":"/dev/reference/DoubleMLClusterData.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"DoubleMLClusterData$new() DoubleMLClusterData$print() DoubleMLClusterData$set_data_model() DoubleMLClusterData$clone()","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"Creates new instance R6 class.","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"","code":"DoubleMLClusterData$new(   data = NULL,   x_cols = NULL,   y_col = NULL,   d_cols = NULL,   cluster_cols = NULL,   z_cols = NULL,   use_other_treat_as_covariate = TRUE )"},{"path":"/dev/reference/DoubleMLClusterData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"data (data.table, data.frame()) Data object. x_cols (NULL, character())  covariates. NULL, variables (columns data) neither specified outcome variable y_col, treatment variables d_cols, instrumental variables z_cols used covariates. Default NULL. y_col (character(1))  outcome variable. d_cols (character())  treatment variable(s). cluster_cols (character())  cluster variable(s). z_cols (NULL, character())  instrumental variables. Default NULL. use_other_treat_as_covariate (logical(1))  Indicates whether multiple-treatment case treatment variables added covariates. Default TRUE.","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"Print DoubleMLClusterData objects.","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"","code":"DoubleMLClusterData$print()"},{"path":"/dev/reference/DoubleMLClusterData.html","id":"method-set-data-model-","dir":"Reference","previous_headings":"","what":"Method set_data_model()","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"Setter function data_model. function implements causal model specified user via y_col, d_cols, x_cols, z_cols cluster_cols assigns role treatment variables multiple-treatment case.","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"","code":"DoubleMLClusterData$set_data_model(treatment_var)"},{"path":"/dev/reference/DoubleMLClusterData.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"treatment_var (character()) Active treatment variable set treat_col.","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"objects class cloneable method.","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"","code":"DoubleMLClusterData$clone(deep = FALSE)"},{"path":"/dev/reference/DoubleMLClusterData.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"deep Whether make deep clone.","code":""},{"path":"/dev/reference/DoubleMLClusterData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double machine learning data-backend for data with cluster variables ‚Äî DoubleMLClusterData","text":"","code":"library(DoubleML) dt = make_pliv_multiway_cluster_CKMS2021(return_type = \"data.table\") obj_dml_data = DoubleMLClusterData$new(dt,   y_col = \"Y\",   d_cols = \"D\",   z_cols = \"Z\",   cluster_cols = c(\"cluster_var_i\", \"cluster_var_j\"))"},{"path":"/dev/reference/DoubleMLData.html","id":null,"dir":"Reference","previous_headings":"","what":"Double machine learning data-backend ‚Äî DoubleMLData","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"Double machine learning data-backend. DoubleMLData objects can initialized data.table. Alternatively DoubleML provides functions initialize collection matrix objects data.frame. following functions can used create new instance DoubleMLData. DoubleMLData$new() initialization data.table. double_ml_data_from_matrix() initialization matrix objects, double_ml_data_from_data_frame() initialization data.frame.","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"all_variables (character()) variables available dataset. d_cols (character()) treatment variable(s). data (data.table) Data object. data_model (data.table) Internal data object implements causal model specified user via y_col, d_cols, x_cols z_cols. n_instr (NULL, integer(1))  number instruments. n_obs (integer(1))  number observations. n_treat (integer(1))  number treatment variables. other_treat_cols (NULL, character())  use_other_treat_as_covariate TRUE, other_treat_cols treatment variables \"active\" multiple-treatment case. variables internally added covariates x_cols fitting stage. use_other_treat_as_covariate FALSE, other_treat_cols NULL. treat_col (character(1))  \"Active\" treatment variable multiple-treatment case. use_other_treat_as_covariate (logical(1))  Indicates whether multiple-treatment case treatment variables added covariates. Default TRUE. x_cols (NULL, character())  covariates. NULL, variables (columns data) neither specified outcome variable y_col, treatment variables d_cols, instrumental variables z_cols used covariates. Default NULL. y_col (character(1))  outcome variable. z_cols (NULL, character())  instrumental variables. Default NULL.","code":""},{"path":[]},{"path":"/dev/reference/DoubleMLData.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"DoubleMLData$new() DoubleMLData$print() DoubleMLData$set_data_model() DoubleMLData$clone()","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"Creates new instance R6 class.","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"","code":"DoubleMLData$new(   data = NULL,   x_cols = NULL,   y_col = NULL,   d_cols = NULL,   z_cols = NULL,   use_other_treat_as_covariate = TRUE )"},{"path":"/dev/reference/DoubleMLData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"data (data.table, data.frame()) Data object. x_cols (NULL, character())  covariates. NULL, variables (columns data) neither specified outcome variable y_col, treatment variables d_cols, instrumental variables z_cols used covariates. Default NULL. y_col (character(1))  outcome variable. d_cols (character())  treatment variable(s). z_cols (NULL, character())  instrumental variables. Default NULL. use_other_treat_as_covariate (logical(1))  Indicates whether multiple-treatment case treatment variables added covariates. Default TRUE.","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"Print DoubleMLData objects.","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"","code":"DoubleMLData$print()"},{"path":"/dev/reference/DoubleMLData.html","id":"method-set-data-model-","dir":"Reference","previous_headings":"","what":"Method set_data_model()","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"Setter function data_model. function implements causal model specified user via y_col, d_cols, x_cols z_cols assigns role treatment variables multiple-treatment case.","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"","code":"DoubleMLData$set_data_model(treatment_var)"},{"path":"/dev/reference/DoubleMLData.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"treatment_var (character()) Active treatment variable set treat_col.","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"objects class cloneable method.","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"","code":"DoubleMLData$clone(deep = FALSE)"},{"path":"/dev/reference/DoubleMLData.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"deep Whether make deep clone.","code":""},{"path":"/dev/reference/DoubleMLData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double machine learning data-backend ‚Äî DoubleMLData","text":"","code":"library(DoubleML) df = make_plr_CCDDHNR2018(return_type = \"data.table\") obj_dml_data = DoubleMLData$new(df,   y_col = \"y\",   d_cols = \"d\")"},{"path":"/dev/reference/DoubleMLIIVM.html","id":null,"dir":"Reference","previous_headings":"","what":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"Double machine learning interactive IV regression models.","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"R6::R6Class object inheriting DoubleML.","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"Interactive IV regression (IIVM) models take form \\(Y = \\ell_0(D,X) + \\zeta\\), \\(Z = m_0(X) + V\\), \\(E[\\zeta|X,Z]=0\\) \\(E[V|X] = 0\\). \\(Y\\) outcome variable, \\(D \\\\{0,1\\}\\) binary treatment variable \\(Z \\\\{0,1\\}\\) binary instrumental variable. Consider functions \\(g_0\\), \\(r_0\\) \\(m_0\\), \\(g_0\\) maps support \\((Z,X)\\) \\(R\\) \\(r_0\\) \\(m_0\\), respectively, map support \\((Z,X)\\) \\(X\\) \\((\\epsilon, 1-\\epsilon)\\) \\(\\epsilon \\(1, 1/2)\\), \\(Y = g_0(Z,X) + \\nu,\\) \\(D = r_0(Z,X) + U,\\) \\(Z = m_0(X) + V,\\) \\(E[\\nu|Z,X]=0\\), \\(E[U|Z,X]=0\\) \\(E[V|X]=0\\). target parameter interest model local average treatment effect (LATE), \\(\\theta_0 = \\frac{E[g_0(1,X)] - E[g_0(0,X)]}{E[r_0(1,X)] - E[r_0(0,X)]}.\\)","code":""},{"path":[]},{"path":"/dev/reference/DoubleMLIIVM.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"DoubleML::DoubleML -> DoubleMLIIVM","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"subgroups (named list(2))  Named list(2) options adapt cases without subgroups always-takers never-takes. entry always_takers(logical(1)) speficies whether always takers sample. entry never_takers (logical(1)) speficies whether never takers sample. trimming_rule (character(1))  character(1) specifying trimming approach. trimming_threshold (numeric(1))  threshold used timming.","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"DoubleML::DoubleML$bootstrap() DoubleML::DoubleML$confint() DoubleML::DoubleML$fit() DoubleML::DoubleML$get_params() DoubleML::DoubleML$learner_names() DoubleML::DoubleML$p_adjust() DoubleML::DoubleML$params_names() DoubleML::DoubleML$print() DoubleML::DoubleML$set_ml_nuisance_params() DoubleML::DoubleML$set_sample_splitting() DoubleML::DoubleML$split_samples() DoubleML::DoubleML$summary() DoubleML::DoubleML$tune()","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"DoubleMLIIVM$new() DoubleMLIIVM$clone()","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"Creates new instance R6 class.","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"","code":"DoubleMLIIVM$new(   data,   ml_g,   ml_m,   ml_r,   n_folds = 5,   n_rep = 1,   score = \"LATE\",   subgroups = list(always_takers = TRUE, never_takers = TRUE),   dml_procedure = \"dml2\",   trimming_rule = \"truncate\",   trimming_threshold = 1e-12,   draw_sample_splitting = TRUE,   apply_cross_fitting = TRUE )"},{"path":"/dev/reference/DoubleMLIIVM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"data (DoubleMLData)  DoubleMLData object providing data specifying variables causal model. ml_g (LearnerRegr, LearnerClassif, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. binary treatment outcomes, object class LearnerClassif can passed, example lrn(\"classif.cv_glmnet\", s = \"lambda.min\"). Alternatively, Learner object public field task_type = \"regr\" task_type = \"classif\" can passed, respectively, example class GraphLearner. ml_g refers nuisance function \\(g_0(Z,X) = E[Y|X,Z]\\). ml_m (LearnerClassif, Learner, character(1))  learner class LearnerClassif, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"classif\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"classif.cv_glmnet\", s = \"lambda.min\"). ml_m refers nuisance function \\(m_0(X) = E[Z|X]\\). ml_r (LearnerClassif, Learner, character(1))  learner class LearnerClassif, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"classif\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"classif.cv_glmnet\", s = \"lambda.min\"). ml_r refers nuisance function \\(r_0(Z,X) = E[D|X,Z]\\). n_folds (integer(1)) Number folds. Default 5. n_rep (integer(1))  Number repetitions sample splitting. Default 1. score (character(1), function())  character(1) (\"LATE\" choice) specifying score function. function() provided, must form function(y, z, d, g0_hat, g1_hat, m_hat, r0_hat, r1_hat, smpls) returned output must named list() elements psi_a psi_b. Default \"LATE\". subgroups (named list(2))  Named list(2) options adapt cases without subgroups always-takers never-takes. entry always_takers(logical(1)) speficies whether always takers sample. entry never_takers (logical(1)) speficies whether never takers sample. Default list(always_takers = TRUE, never_takers = TRUE). dml_procedure (character(1))  character(1) (\"dml1\" \"dml2\") specifying double machine learning algorithm. Default \"dml2\". trimming_rule (character(1))  character(1) (\"truncate\" choice) specifying trimming approach. Default \"truncate\". trimming_threshold (numeric(1))  threshold used timming. Default 1e-12. draw_sample_splitting (logical(1))  Indicates whether sample splitting drawn initialization object. Default TRUE. apply_cross_fitting (logical(1))  Indicates whether cross-fitting applied. Default TRUE.","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"objects class cloneable method.","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"","code":"DoubleMLIIVM$clone(deep = FALSE)"},{"path":"/dev/reference/DoubleMLIIVM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"deep Whether make deep clone.","code":""},{"path":"/dev/reference/DoubleMLIIVM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double machine learning for interactive IV regression models ‚Äî DoubleMLIIVM","text":"","code":"# \\donttest{ library(DoubleML) library(mlr3) library(mlr3learners) library(data.table) set.seed(2) ml_g = lrn(\"regr.ranger\",   num.trees = 100, mtry = 20,   min.node.size = 2, max.depth = 5) ml_m = lrn(\"classif.ranger\",   num.trees = 100, mtry = 20,   min.node.size = 2, max.depth = 5) ml_r = ml_m$clone() obj_dml_data = make_iivm_data(   theta = 0.5, n_obs = 1000,   alpha_x = 1, dim_x = 20) dml_iivm_obj = DoubleMLIIVM$new(obj_dml_data, ml_g, ml_m, ml_r) dml_iivm_obj$fit() dml_iivm_obj$summary() #> Estimates and significance testing of the effect of target variables #>   Estimate. Std. Error t value Pr(>|t|)   #> d    0.5418     0.2149   2.522   0.0117 * #> --- #> Signif. codes:  0 ‚Äò***‚Äô 0.001 ‚Äò**‚Äô 0.01 ‚Äò*‚Äô 0.05 ‚Äò.‚Äô 0.1 ‚Äò ‚Äô 1 #>  #>  # }  if (FALSE) { library(DoubleML) library(mlr3) library(mlr3learners) library(mlr3tuning) library(data.table) set.seed(2) ml_g = lrn(\"regr.rpart\") ml_m = lrn(\"classif.rpart\") ml_r = ml_m$clone() obj_dml_data = make_iivm_data(   theta = 0.5, n_obs = 1000,   alpha_x = 1, dim_x = 20) dml_iivm_obj = DoubleMLIIVM$new(obj_dml_data, ml_g, ml_m, ml_r) param_grid = list(   \"ml_g\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))),   \"ml_m\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))),   \"ml_r\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2)))) # minimum requirements for tune_settings tune_settings = list(   terminator = mlr3tuning::trm(\"evals\", n_evals = 5),   algorithm = mlr3tuning::tnr(\"grid_search\", resolution = 5)) dml_iivm_obj$tune(param_set = param_grid, tune_settings = tune_settings) dml_iivm_obj$fit() dml_iivm_obj$summary() }"},{"path":"/dev/reference/DoubleMLIRM.html","id":null,"dir":"Reference","previous_headings":"","what":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"Double machine learning interactive regression models.","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"R6::R6Class object inheriting DoubleML.","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"Interactive regression (IRM) models take form \\(Y = g_0(D,X) + U\\), \\(D = m_0(X) + V\\), \\(E[U|X,D]=0\\) \\(E[V|X] = 0\\). \\(Y\\) outcome variable \\(D \\\\{0,1\\}\\) binary treatment variable. consider estimation average treamtent effects treatment effects fully heterogeneous. Target parameters interest model average treatment effect (ATE), \\(\\theta_0 = E[g_0(1,X) - g_0(0,X)]\\) average treament effect treated (ATTE), \\(\\theta_0 = E[g_0(1,X) - g_0(0,X)|D=1]\\).","code":""},{"path":[]},{"path":"/dev/reference/DoubleMLIRM.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"DoubleML::DoubleML -> DoubleMLIRM","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"trimming_rule (character(1))  character(1) specifying trimming approach. trimming_threshold (numeric(1))  threshold used timming.","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"DoubleML::DoubleML$bootstrap() DoubleML::DoubleML$confint() DoubleML::DoubleML$fit() DoubleML::DoubleML$get_params() DoubleML::DoubleML$learner_names() DoubleML::DoubleML$p_adjust() DoubleML::DoubleML$params_names() DoubleML::DoubleML$print() DoubleML::DoubleML$set_ml_nuisance_params() DoubleML::DoubleML$set_sample_splitting() DoubleML::DoubleML$split_samples() DoubleML::DoubleML$summary() DoubleML::DoubleML$tune()","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"DoubleMLIRM$new() DoubleMLIRM$clone()","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"Creates new instance R6 class.","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"","code":"DoubleMLIRM$new(   data,   ml_g,   ml_m,   n_folds = 5,   n_rep = 1,   score = \"ATE\",   trimming_rule = \"truncate\",   trimming_threshold = 1e-12,   dml_procedure = \"dml2\",   draw_sample_splitting = TRUE,   apply_cross_fitting = TRUE )"},{"path":"/dev/reference/DoubleMLIRM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"data (DoubleMLData)  DoubleMLData object providing data specifying variables causal model. ml_g (LearnerRegr, LearnerClassif, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. binary treatment outcomes, object class LearnerClassif can passed, example lrn(\"classif.cv_glmnet\", s = \"lambda.min\"). Alternatively, Learner object public field task_type = \"regr\" task_type = \"classif\" can passed, respectively, example class GraphLearner. ml_g refers nuisance function \\(g_0(X) = E[Y|X,D]\\). ml_m (LearnerClassif, Learner, character(1))  learner class LearnerClassif, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"classif\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"classif.cv_glmnet\", s = \"lambda.min\"). ml_m refers nuisance function \\(m_0(X) = E[D|X]\\). n_folds (integer(1)) Number folds. Default 5. n_rep (integer(1))  Number repetitions sample splitting. Default 1. score (character(1), function())  character(1) (\"ATE\" ATTE) function() specifying score function. function() provided, must form function(y, d, g0_hat, g1_hat, m_hat, smpls) returned output must named list() elements psi_a psi_b. Default \"ATE\". trimming_rule (character(1))  character(1) (\"truncate\" choice) specifying trimming approach. Default \"truncate\". trimming_threshold (numeric(1))  threshold used timming. Default 1e-12. dml_procedure (character(1))  character(1) (\"dml1\" \"dml2\") specifying double machine learning algorithm. Default \"dml2\". draw_sample_splitting (logical(1))  Indicates whether sample splitting drawn initialization object. Default TRUE. apply_cross_fitting (logical(1))  Indicates whether cross-fitting applied. Default TRUE.","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"objects class cloneable method.","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"","code":"DoubleMLIRM$clone(deep = FALSE)"},{"path":"/dev/reference/DoubleMLIRM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"deep Whether make deep clone.","code":""},{"path":"/dev/reference/DoubleMLIRM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double machine learning for interactive regression models ‚Äî DoubleMLIRM","text":"","code":"# \\donttest{ library(DoubleML) library(mlr3) library(mlr3learners) library(data.table) set.seed(2) ml_g = lrn(\"regr.ranger\",   num.trees = 100, mtry = 20,   min.node.size = 2, max.depth = 5) ml_m = lrn(\"classif.ranger\",   num.trees = 100, mtry = 20,   min.node.size = 2, max.depth = 5) obj_dml_data = make_irm_data(theta = 0.5) dml_irm_obj = DoubleMLIRM$new(obj_dml_data, ml_g, ml_m) dml_irm_obj$fit() dml_irm_obj$summary() #> Estimates and significance testing of the effect of target variables #>   Estimate. Std. Error t value Pr(>|t|)   #> d    0.6722     0.2851   2.358   0.0184 * #> --- #> Signif. codes:  0 ‚Äò***‚Äô 0.001 ‚Äò**‚Äô 0.01 ‚Äò*‚Äô 0.05 ‚Äò.‚Äô 0.1 ‚Äò ‚Äô 1 #>  #>  # } if (FALSE) { library(DoubleML) library(mlr3) library(mlr3learners) library(mlr3uning) library(data.table) set.seed(2) ml_g = lrn(\"regr.rpart\") ml_m = lrn(\"classif.rpart\") obj_dml_data = make_irm_data(theta = 0.5) dml_irm_obj = DoubleMLIRM$new(obj_dml_data, ml_g, ml_m)  param_grid = list(   \"ml_g\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))),   \"ml_m\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))))  # minimum requirements for tune_settings tune_settings = list(   terminator = mlr3tuning::trm(\"evals\", n_evals = 5),   algorithm = mlr3tuning::tnr(\"grid_search\", resolution = 5)) dml_irm_obj$tune(param_set = param_grid, tune_settings = tune_settings) dml_irm_obj$fit() dml_irm_obj$summary() }"},{"path":"/dev/reference/DoubleMLPLIV.html","id":null,"dir":"Reference","previous_headings":"","what":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"Double machine learning partially linear IV regression models.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"R6::R6Class object inheriting DoubleML.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"Partially linear IV regression (PLIV) models take form \\(Y - D\\theta_0 = g_0(X) + \\zeta\\), \\(Z = m_0(X) + V\\), \\(E[\\zeta|Z,X]=0\\) \\(E[V|X] = 0\\). \\(Y\\) outcome variable variable, \\(D\\) policy variable interest \\(Z\\) denotes one multiple instrumental variables. high-dimensional vector \\(X = (X_1, \\ldots, X_p)\\) consists confounding covariates, \\(\\zeta\\) \\(V\\) stochastic errors.","code":""},{"path":[]},{"path":"/dev/reference/DoubleMLPLIV.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"DoubleML::DoubleML -> DoubleMLPLIV","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"partialX (logical(1))   Indicates whether covariates \\(X\\) partialled . partialZ (logical(1))  Indicates whether instruments \\(Z\\) partialled .","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"DoubleML::DoubleML$bootstrap() DoubleML::DoubleML$confint() DoubleML::DoubleML$fit() DoubleML::DoubleML$get_params() DoubleML::DoubleML$learner_names() DoubleML::DoubleML$p_adjust() DoubleML::DoubleML$params_names() DoubleML::DoubleML$print() DoubleML::DoubleML$set_sample_splitting() DoubleML::DoubleML$split_samples() DoubleML::DoubleML$summary()","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"DoubleMLPLIV$new() DoubleMLPLIV$set_ml_nuisance_params() DoubleMLPLIV$tune() DoubleMLPLIV$clone()","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"Creates new instance R6 class.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"","code":"DoubleMLPLIV$new(   data,   ml_l,   ml_m,   ml_r,   ml_g = NULL,   partialX = TRUE,   partialZ = FALSE,   n_folds = 5,   n_rep = 1,   score = \"partialling out\",   dml_procedure = \"dml2\",   draw_sample_splitting = TRUE,   apply_cross_fitting = TRUE )"},{"path":"/dev/reference/DoubleMLPLIV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"data (DoubleMLData)  DoubleMLData object providing data specifying variables causal model. ml_l (LearnerRegr, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"regr\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"regr.cv_glmnet\", s = \"lambda.min\").  ml_l refers nuisance function \\(l_0(X) = E[Y|X]\\). ml_m (LearnerRegr, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"regr\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"regr.cv_glmnet\", s = \"lambda.min\"). ml_m refers nuisance function \\(m_0(X) = E[Z|X]\\). ml_r (LearnerRegr, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"regr\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"regr.cv_glmnet\", s = \"lambda.min\"). ml_r refers nuisance function \\(r_0(X) = E[D|X]\\). ml_g (LearnerRegr, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"regr\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"regr.cv_glmnet\", s = \"lambda.min\"). ml_g refers nuisance function \\(g_0(X) = E[Y - D\\theta_0|X]\\). Note: learner ml_g required score 'IV-type'. Optionally, can specified estimated callable scores. partialX (logical(1))   Indicates whether covariates \\(X\\) partialled . Default TRUE. partialZ (logical(1))  Indicates whether instruments \\(Z\\) partialled . Default FALSE. n_folds (integer(1)) Number folds. Default 5. n_rep (integer(1))  Number repetitions sample splitting. Default 1. score (character(1), function())  character(1) (\"partialling \" \"IV-type\") function() specifying score function. function() provided, must form function(y, z, d, l_hat, m_hat, r_hat, g_hat, smpls) returned output must named list() elements psi_a psi_b. Default \"partialling \". dml_procedure (character(1))  character(1) (\"dml1\" \"dml2\") specifying double machine learning algorithm. Default \"dml2\". draw_sample_splitting (logical(1))  Indicates whether sample splitting drawn initialization object. Default TRUE. apply_cross_fitting (logical(1))  Indicates whether cross-fitting applied. Default TRUE.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"method-set-ml-nuisance-params-","dir":"Reference","previous_headings":"","what":"Method set_ml_nuisance_params()","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"Set hyperparameters nuisance models DoubleML models. Note current implementation, either parameters set globally parameters provided fold-specific.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"","code":"DoubleMLPLIV$set_ml_nuisance_params(   learner = NULL,   treat_var = NULL,   params,   set_fold_specific = FALSE )"},{"path":"/dev/reference/DoubleMLPLIV.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"learner (character(1))  nuisance model/learner (see method params_names). treat_var (character(1))  treatment varaible (hyperparameters can set treatment-variable specific). params (named list())  named list() estimator parameters. Parameters used folds default. Alternatively, parameters can passed fold-specific way option  fold_specificis TRUE. case, outer list needs length n_rep inner list length n_folds. set_fold_specific (logical(1))  Indicates parameters passed params passed fold-specific way. Default FALSE. TRUE, outer list needs length n_rep inner list length n_folds. Note current implementation, either parameters set globally parameters provided fold-specific.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"self","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"method-tune-","dir":"Reference","previous_headings":"","what":"Method tune()","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"Hyperparameter-tuning DoubleML models. hyperparameter-tuning performed using tuning methods provided mlr3tuning package. information tuning mlr3, refer section parameter tuning mlr3 book.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"","code":"DoubleMLPLIV$tune(   param_set,   tune_settings = list(n_folds_tune = 5, rsmp_tune = mlr3::rsmp(\"cv\", folds = 5), measure     = NULL, terminator = mlr3tuning::trm(\"evals\", n_evals = 20), algorithm =     mlr3tuning::tnr(\"grid_search\"), resolution = 5),   tune_on_folds = FALSE )"},{"path":"/dev/reference/DoubleMLPLIV.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"param_set (named list())  named list parameter grid nuisance model/learner (see method learner_names()). parameter grid must object class ParamSet. tune_settings (named list())  named list() arguments passed hyperparameter-tuning mlr3tuning set TuningInstance objects. tune_settings entries terminator (Terminator)  Terminator object. Specification terminator required perform tuning. algorithm (Tuner character(1))  Tuner object (recommended) key passed respective dictionary specify tuning algorithm used tnr(). algorithm passed argument tnr(). algorithm specified users, default set \"grid_search\". set \"grid_search\", additional argument \"resolution\" required. rsmp_tune (Resampling character(1)) Resampling object (recommended) option passed rsmp() initialize Resampling parameter tuning mlr3. specified user, default set \"cv\" (cross-validation). n_folds_tune (integer(1), optional)  rsmp_tune = \"cv\", number folds used cross-validation. specified user, default set 5. measure (NULL, named list(), optional)  Named list containing measures used parameter tuning. Entries list must either Measure objects keys passed passed msr(). names entries must match learner names (see method learner_names()). set NULL, default measures used, .e., \"regr.mse\" continuous outcome variables \"classif.ce\" binary outcomes. resolution (character(1))  key passed respective dictionary specify  tuning algorithm used tnr(). resolution passed argument tnr(). tune_on_folds (logical(1))  Indicates whether tuning done fold-specific globally. Default FALSE.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"self","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"objects class cloneable method.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"","code":"DoubleMLPLIV$clone(deep = FALSE)"},{"path":"/dev/reference/DoubleMLPLIV.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"deep Whether make deep clone.","code":""},{"path":"/dev/reference/DoubleMLPLIV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double machine learning for partially linear IV regression models ‚Äî DoubleMLPLIV","text":"","code":"# \\donttest{ library(DoubleML) library(mlr3) library(mlr3learners) library(data.table) set.seed(2) ml_l = lrn(\"regr.ranger\", num.trees = 100, mtry = 20, min.node.size = 2, max.depth = 5) ml_m = ml_l$clone() ml_r = ml_l$clone() obj_dml_data = make_pliv_CHS2015(alpha = 1, n_obs = 500, dim_x = 20, dim_z = 1) dml_pliv_obj = DoubleMLPLIV$new(obj_dml_data, ml_l, ml_m, ml_r) dml_pliv_obj$fit() dml_pliv_obj$summary() #> Estimates and significance testing of the effect of target variables #>   Estimate. Std. Error t value Pr(>|t|)     #> d    0.9722     0.1032   9.418   <2e-16 *** #> --- #> Signif. codes:  0 ‚Äò***‚Äô 0.001 ‚Äò**‚Äô 0.01 ‚Äò*‚Äô 0.05 ‚Äò.‚Äô 0.1 ‚Äò ‚Äô 1 #>  #>  # }  if (FALSE) { library(DoubleML) library(mlr3) library(mlr3learners) library(mlr3tuning) library(data.table) set.seed(2) ml_l = lrn(\"regr.rpart\") ml_m = ml_l$clone() ml_r = ml_l$clone() obj_dml_data = make_pliv_CHS2015(   alpha = 1, n_obs = 500, dim_x = 20,   dim_z = 1) dml_pliv_obj = DoubleMLPLIV$new(obj_dml_data, ml_l, ml_m, ml_r) param_grid = list(   \"ml_l\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))),   \"ml_m\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))),   \"ml_r\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))))  # minimum requirements for tune_settings tune_settings = list(   terminator = mlr3tuning::trm(\"evals\", n_evals = 5),   algorithm = mlr3tuning::tnr(\"grid_search\", resolution = 5)) dml_pliv_obj$tune(param_set = param_grid, tune_settings = tune_settings) dml_pliv_obj$fit() dml_pliv_obj$summary() }"},{"path":"/dev/reference/DoubleMLPLR.html","id":null,"dir":"Reference","previous_headings":"","what":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"Double machine learning partially linear regression models.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"R6::R6Class object inheriting DoubleML.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"Partially linear regression (PLR) models take form \\(Y = D\\theta_0 + g_0(X) + \\zeta,\\) \\(D = m_0(X) + V,\\) \\(E[\\zeta|D,X]=0\\) \\(E[V|X] = 0\\). \\(Y\\) outcome variable variable \\(D\\) policy variable interest. high-dimensional vector \\(X = (X_1, \\ldots, X_p)\\) consists confounding covariates, \\(\\zeta\\) \\(V\\) stochastic errors.","code":""},{"path":[]},{"path":"/dev/reference/DoubleMLPLR.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"DoubleML::DoubleML -> DoubleMLPLR","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"DoubleML::DoubleML$bootstrap() DoubleML::DoubleML$confint() DoubleML::DoubleML$fit() DoubleML::DoubleML$get_params() DoubleML::DoubleML$learner_names() DoubleML::DoubleML$p_adjust() DoubleML::DoubleML$params_names() DoubleML::DoubleML$print() DoubleML::DoubleML$set_sample_splitting() DoubleML::DoubleML$split_samples() DoubleML::DoubleML$summary()","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"DoubleMLPLR$new() DoubleMLPLR$set_ml_nuisance_params() DoubleMLPLR$tune() DoubleMLPLR$clone()","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"Creates new instance R6 class.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"","code":"DoubleMLPLR$new(   data,   ml_l,   ml_m,   ml_g = NULL,   n_folds = 5,   n_rep = 1,   score = \"partialling out\",   dml_procedure = \"dml2\",   draw_sample_splitting = TRUE,   apply_cross_fitting = TRUE )"},{"path":"/dev/reference/DoubleMLPLR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"data (DoubleMLData)  DoubleMLData object providing data specifying variables causal model. ml_l (LearnerRegr, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"regr\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"regr.cv_glmnet\", s = \"lambda.min\"). ml_l refers nuisance function \\(l_0(X) = E[Y|X]\\). ml_m (LearnerRegr, LearnerClassif, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. binary treatment variables, object class LearnerClassif can passed, example lrn(\"classif.cv_glmnet\", s = \"lambda.min\"). Alternatively, Learner object public field task_type = \"regr\" task_type = \"classif\" can passed, respectively, example class GraphLearner. ml_m refers nuisance function \\(m_0(X) = E[D|X]\\). ml_g (LearnerRegr, Learner, character(1))  learner class LearnerRegr, available mlr3 extension packages mlr3learners mlr3extralearners. Alternatively, Learner object public field task_type = \"regr\" can passed, example class GraphLearner. learner can possibly passed specified parameters, example lrn(\"regr.cv_glmnet\", s = \"lambda.min\"). ml_g refers nuisance function \\(g_0(X) = E[Y - D\\theta_0|X]\\). Note: learner ml_g required score 'IV-type'. Optionally, can specified estimated callable scores. n_folds (integer(1)) Number folds. Default 5. n_rep (integer(1))  Number repetitions sample splitting. Default 1. score (character(1), function())  character(1) (\"partialling \" \"IV-type\") function() specifying score function. function() provided, must form function(y, d, l_hat, m_hat, g_hat, smpls) returned output must named list() elements psi_a psi_b. Default \"partialling \". dml_procedure (character(1))  character(1) (\"dml1\" \"dml2\") specifying double machine learning algorithm. Default \"dml2\". draw_sample_splitting (logical(1))  Indicates whether sample splitting drawn initialization object. Default TRUE. apply_cross_fitting (logical(1))  Indicates whether cross-fitting applied. Default TRUE.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"method-set-ml-nuisance-params-","dir":"Reference","previous_headings":"","what":"Method set_ml_nuisance_params()","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"Set hyperparameters nuisance models DoubleML models. Note current implementation, either parameters set globally parameters provided fold-specific.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"","code":"DoubleMLPLR$set_ml_nuisance_params(   learner = NULL,   treat_var = NULL,   params,   set_fold_specific = FALSE )"},{"path":"/dev/reference/DoubleMLPLR.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"learner (character(1))  nuisance model/learner (see method params_names). treat_var (character(1))  treatment varaible (hyperparameters can set treatment-variable specific). params (named list())  named list() estimator parameters. Parameters used folds default. Alternatively, parameters can passed fold-specific way option  fold_specificis TRUE. case, outer list needs length n_rep inner list length n_folds. set_fold_specific (logical(1))  Indicates parameters passed params passed fold-specific way. Default FALSE. TRUE, outer list needs length n_rep inner list length n_folds. Note current implementation, either parameters set globally parameters provided fold-specific.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"self","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"method-tune-","dir":"Reference","previous_headings":"","what":"Method tune()","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"Hyperparameter-tuning DoubleML models. hyperparameter-tuning performed using tuning methods provided mlr3tuning package. information tuning mlr3, refer section parameter tuning mlr3 book.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"","code":"DoubleMLPLR$tune(   param_set,   tune_settings = list(n_folds_tune = 5, rsmp_tune = mlr3::rsmp(\"cv\", folds = 5), measure     = NULL, terminator = mlr3tuning::trm(\"evals\", n_evals = 20), algorithm =     mlr3tuning::tnr(\"grid_search\"), resolution = 5),   tune_on_folds = FALSE )"},{"path":"/dev/reference/DoubleMLPLR.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"param_set (named list())  named list parameter grid nuisance model/learner (see method learner_names()). parameter grid must object class ParamSet. tune_settings (named list())  named list() arguments passed hyperparameter-tuning mlr3tuning set TuningInstance objects. tune_settings entries terminator (Terminator)  Terminator object. Specification terminator required perform tuning. algorithm (Tuner character(1))  Tuner object (recommended) key passed respective dictionary specify tuning algorithm used tnr(). algorithm passed argument tnr(). algorithm specified users, default set \"grid_search\". set \"grid_search\", additional argument \"resolution\" required. rsmp_tune (Resampling character(1)) Resampling object (recommended) option passed rsmp() initialize Resampling parameter tuning mlr3. specified user, default set \"cv\" (cross-validation). n_folds_tune (integer(1), optional)  rsmp_tune = \"cv\", number folds used cross-validation. specified user, default set 5. measure (NULL, named list(), optional)  Named list containing measures used parameter tuning. Entries list must either Measure objects keys passed passed msr(). names entries must match learner names (see method learner_names()). set NULL, default measures used, .e., \"regr.mse\" continuous outcome variables \"classif.ce\" binary outcomes. resolution (character(1))  key passed respective dictionary specify  tuning algorithm used tnr(). resolution passed argument tnr(). tune_on_folds (logical(1))  Indicates whether tuning done fold-specific globally. Default FALSE.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"self","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"objects class cloneable method.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"","code":"DoubleMLPLR$clone(deep = FALSE)"},{"path":"/dev/reference/DoubleMLPLR.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"deep Whether make deep clone.","code":""},{"path":"/dev/reference/DoubleMLPLR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double machine learning for partially linear regression models ‚Äî DoubleMLPLR","text":"","code":"# \\donttest{ library(DoubleML) library(mlr3) library(mlr3learners) library(data.table) set.seed(2) ml_g = lrn(\"regr.ranger\", num.trees = 10, max.depth = 2) ml_m = ml_g$clone() obj_dml_data = make_plr_CCDDHNR2018(alpha = 0.5) dml_plr_obj = DoubleMLPLR$new(obj_dml_data, ml_g, ml_m) dml_plr_obj$fit() dml_plr_obj$summary() #> Estimates and significance testing of the effect of target variables #>   Estimate. Std. Error t value Pr(>|t|)     #> d   0.49142    0.03768   13.04   <2e-16 *** #> --- #> Signif. codes:  0 ‚Äò***‚Äô 0.001 ‚Äò**‚Äô 0.01 ‚Äò*‚Äô 0.05 ‚Äò.‚Äô 0.1 ‚Äò ‚Äô 1 #>  #>  # }  if (FALSE) { library(DoubleML) library(mlr3) library(mlr3learners) library(mlr3tuning) library(data.table) set.seed(2) ml_l = lrn(\"regr.rpart\") ml_m = ml_l$clone() obj_dml_data = make_plr_CCDDHNR2018(alpha = 0.5) dml_plr_obj = DoubleMLPLR$new(obj_dml_data, ml_l, ml_m)  param_grid = list(   \"ml_l\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))),   \"ml_m\" = paradox::ParamSet$new(list(     paradox::ParamDbl$new(\"cp\", lower = 0.01, upper = 0.02),     paradox::ParamInt$new(\"minsplit\", lower = 1, upper = 2))))  # minimum requirements for tune_settings tune_settings = list(   terminator = mlr3tuning::trm(\"evals\", n_evals = 5),   algorithm = mlr3tuning::tnr(\"grid_search\", resolution = 5)) dml_plr_obj$tune(param_set = param_grid, tune_settings = tune_settings) dml_plr_obj$fit() dml_plr_obj$summary() }"},{"path":"/dev/reference/double_ml_data_from_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for Double machine learning data-backend initialization from\ndata.frame. ‚Äî double_ml_data_from_data_frame","title":"Wrapper for Double machine learning data-backend initialization from\ndata.frame. ‚Äî double_ml_data_from_data_frame","text":"Initalization DoubleMLData data.frame.","code":""},{"path":"/dev/reference/double_ml_data_from_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for Double machine learning data-backend initialization from\ndata.frame. ‚Äî double_ml_data_from_data_frame","text":"","code":"double_ml_data_from_data_frame(   df,   x_cols = NULL,   y_col = NULL,   d_cols = NULL,   z_cols = NULL,   cluster_cols = NULL,   use_other_treat_as_covariate = TRUE )"},{"path":"/dev/reference/double_ml_data_from_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for Double machine learning data-backend initialization from\ndata.frame. ‚Äî double_ml_data_from_data_frame","text":"df (data.frame()) Data object. x_cols (NULL, character())  covariates. NULL, variables (columns data) neither specified outcome variable y_col, treatment variables d_cols, instrumental variables z_cols used covariates. Default NULL. y_col (character(1))  outcome variable. d_cols (character())  treatment variable(s). z_cols (NULL, character())  instrumental variables. Default NULL. cluster_cols (NULL, character())  cluster variables. Default NULL. use_other_treat_as_covariate (logical(1))  Indicates whether multiple-treatment case treatment variables added covariates. Default TRUE.","code":""},{"path":"/dev/reference/double_ml_data_from_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for Double machine learning data-backend initialization from\ndata.frame. ‚Äî double_ml_data_from_data_frame","text":"Creates new instance class DoubleMLData.","code":""},{"path":"/dev/reference/double_ml_data_from_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for Double machine learning data-backend initialization from\ndata.frame. ‚Äî double_ml_data_from_data_frame","text":"","code":"df = make_plr_CCDDHNR2018(return_type = \"data.frame\") x_names = names(df)[grepl(\"X\", names(df))] obj_dml_data = double_ml_data_from_data_frame(   df = df, x_cols = x_names,   y_col = \"y\", d_cols = \"d\") # Input: Data frame, Output: DoubleMLData object"},{"path":"/dev/reference/double_ml_data_from_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for Double machine learning data-backend initialization\nfrom matrix. ‚Äî double_ml_data_from_matrix","title":"Wrapper for Double machine learning data-backend initialization\nfrom matrix. ‚Äî double_ml_data_from_matrix","text":"Initalization DoubleMLData matrix() objects.","code":""},{"path":"/dev/reference/double_ml_data_from_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for Double machine learning data-backend initialization\nfrom matrix. ‚Äî double_ml_data_from_matrix","text":"","code":"double_ml_data_from_matrix(   X = NULL,   y,   d,   z = NULL,   cluster_vars = NULL,   data_class = \"DoubleMLData\",   use_other_treat_as_covariate = TRUE )"},{"path":"/dev/reference/double_ml_data_from_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for Double machine learning data-backend initialization\nfrom matrix. ‚Äî double_ml_data_from_matrix","text":"X (matrix())  Matrix covariates. y (numeric())  Vector outcome variable. d (matrix())  Matrix treatment variables. z (matrix())  Matrix instruments. cluster_vars (matrix())  Matrix cluster variables. data_class (character(1))  Class returned object. default, object class DoubleMLData returned. Setting data_class = \"data.table\" returns object class data.table. use_other_treat_as_covariate (logical(1))  Indicates whether multiple-treatment case treatment variables added covariates. Default TRUE.","code":""},{"path":"/dev/reference/double_ml_data_from_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for Double machine learning data-backend initialization\nfrom matrix. ‚Äî double_ml_data_from_matrix","text":"Creates new instance class DoubleMLData.","code":""},{"path":"/dev/reference/double_ml_data_from_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for Double machine learning data-backend initialization\nfrom matrix. ‚Äî double_ml_data_from_matrix","text":"","code":"matrix_list = make_plr_CCDDHNR2018(return_type = \"matrix\") obj_dml_data = double_ml_data_from_matrix(   X = matrix_list$X,   y = matrix_list$y,   d = matrix_list$d)"},{"path":"/dev/reference/fetch_401k.html","id":null,"dir":"Reference","previous_headings":"","what":"Data set on financial wealth and 401(k) plan participation. ‚Äî fetch_401k","title":"Data set on financial wealth and 401(k) plan participation. ‚Äî fetch_401k","text":"Preprocessed data set financial wealth 401(k) plan participation. raw data files preprocessed reproduce examples Chernozhukov et al. (2020). internet connection required sucessfully download data set.","code":""},{"path":"/dev/reference/fetch_401k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data set on financial wealth and 401(k) plan participation. ‚Äî fetch_401k","text":"","code":"fetch_401k(   return_type = \"DoubleMLData\",   polynomial_features = FALSE,   instrument = FALSE )"},{"path":"/dev/reference/fetch_401k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data set on financial wealth and 401(k) plan participation. ‚Äî fetch_401k","text":"return_type (character(1))  \"DoubleMLData\", returns DoubleMLData object. \"data.frame\" returns data.frame(). \"data.table\" returns data.table(). Default \"DoubleMLData\". polynomial_features (logical(1))  TRUE polynomial freatures added (see replication file Chernozhukov et al. (2018)). instrument (logical(1))  TRUE, returned data object contains variables e401 p401. return_type = \"DoubleMLData\", variable e401 used instrument endogenous treatment variable p401. FALSE, p401 removed data set.","code":""},{"path":"/dev/reference/fetch_401k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data set on financial wealth and 401(k) plan participation. ‚Äî fetch_401k","text":"data object according choice return_type.","code":""},{"path":"/dev/reference/fetch_401k.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data set on financial wealth and 401(k) plan participation. ‚Äî fetch_401k","text":"Variable description, based supplementary material Chernozhukov et al. (2020): net_tfa: net total financial assets e401: = 1 employer offers 401(k) p401: = 1 individual participates 401(k) plan age: age inc: income fsize: family size educ: years education db: = 1 individual defined benefit pension marr: = 1 married twoearn: = 1 two-earner household pira: = 1 individual participates IRA plan hown: = 1 home owner supplementary data study Chernozhukov et al. (2018) available https://academic.oup.com/ectj/article/21/1/C1/5056401#supplementary-data.","code":""},{"path":"/dev/reference/fetch_401k.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data set on financial wealth and 401(k) plan participation. ‚Äî fetch_401k","text":"Abadie, . (2003), Semiparametric instrumental variable estimation treatment response models. Journal Econometrics, 113(2): 231-263. Chernozhukov, V., Chetverikov, D., Demirer, M., Duflo, E., Hansen, C., Newey, W. Robins, J. (2018), Double/debiased machine learning treatment structural parameters. Econometrics Journal, 21: C1-C68. doi:10.1111/ectj.12097 .","code":""},{"path":"/dev/reference/fetch_bonus.html","id":null,"dir":"Reference","previous_headings":"","what":"Data set on the Pennsylvania Reemployment Bonus experiment. ‚Äî fetch_bonus","title":"Data set on the Pennsylvania Reemployment Bonus experiment. ‚Äî fetch_bonus","text":"Preprocessed data set Pennsylvania Reemploymnent Bonus experiment. raw data files preprocessed reproduce examples Chernozhukov et al. (2020). internet connection required sucessfully download data set.","code":""},{"path":"/dev/reference/fetch_bonus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data set on the Pennsylvania Reemployment Bonus experiment. ‚Äî fetch_bonus","text":"","code":"fetch_bonus(return_type = \"DoubleMLData\", polynomial_features = FALSE)"},{"path":"/dev/reference/fetch_bonus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data set on the Pennsylvania Reemployment Bonus experiment. ‚Äî fetch_bonus","text":"return_type (character(1))  \"DoubleMLData\", returns DoubleMLData object. \"data.frame\" returns data.frame(). \"data.table\" returns data.table(). Default \"DoubleMLData\". polynomial_features (logical(1))  TRUE polynomial freatures added (see replication file Chernozhukov et al. (2018)).","code":""},{"path":"/dev/reference/fetch_bonus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data set on the Pennsylvania Reemployment Bonus experiment. ‚Äî fetch_bonus","text":"data object according choice return_type.","code":""},{"path":"/dev/reference/fetch_bonus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data set on the Pennsylvania Reemployment Bonus experiment. ‚Äî fetch_bonus","text":"Variable description, based supplementary material Chernozhukov et al. (2020): abdt:  chronological time enrollment claimant Pennsylvania reemployment bonus experiment. tg:  indicates treatment group (bonus amount - qualification period) claimant. inuidur1:  measure length (weeks) first spell unemployment inuidur2:  second measure length (weeks) female:  dummy variable; indicates claimant's sex female (=1) male (=0). black: dummy variable; indicates person black race (=1). hispanic:  dummy variable; indicates person hispanic race (=1). othrace: dummy variable; indicates non-white, non-black, -hispanic person (=1). dep1: dummy variable; indicates number dependents claimant equal 1 (=1). dep2: dummy variable; indicates number dependents claimant equal 2 (=1). q1-q6: six dummy variables indicating quarter experiment claimant enrolled. recall:  takes value 1 claimant answered ``yes'' asked /expectation recalled agelt35: takes value 1 claimant's age less 35 0 otherwise. agegt54: takes value 1 claimant's age 54 0 otherwise. durable: takes value 1 occupation claimant sector durable manufacturing 0 otherwise. nondurable:  takes value 1 occupation claimant sector nondurable manufacturing 0 otherwise. lusd:  takes value 1 claimant filed Coatesville, Reading, Lancaster 0 otherwise. three sites considered located areas characterized low unemployment rate short duration unemployment. husd:  takes value 1 claimant filed Lewistown, Pittston, Scranton 0 otherwise. three sites considered located areas characterized high unemployment rate short duration unemployment. muld:  takes value 1 claimant filed Philadelphia-North, Philadelphia-Uptown, McKeesport, Erie, Butler 0 otherwise. three sites considered located areas characterized moderate unemployment rate long duration unemployment.\" supplementary data study Chernozhukov et al. (2018) available https://academic.oup.com/ectj/article/21/1/C1/5056401#supplementary-data. supplementary data study Bilias (2000) available http://qed.econ.queensu.ca/jae/2000-v15.6/bilias/.","code":""},{"path":"/dev/reference/fetch_bonus.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data set on the Pennsylvania Reemployment Bonus experiment. ‚Äî fetch_bonus","text":"Bilias Y. (2000), Sequential Testing Duration Data: Case Pennsylvania ‚ÄòReemployment Bonus‚Äô Experiment. Journal Applied Econometrics, 15(6): 575-594. Chernozhukov, V., Chetverikov, D., Demirer, M., Duflo, E., Hansen, C., Newey, W. Robins, J. (2018), Double/debiased machine learning treatment structural parameters. Econometrics Journal, 21: C1-C68. doi:10.1111/ectj.12097 .","code":""},{"path":"/dev/reference/fetch_bonus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data set on the Pennsylvania Reemployment Bonus experiment. ‚Äî fetch_bonus","text":"","code":"library(DoubleML) df_bonus = fetch_bonus(return_type = \"data.table\") obj_dml_data_bonus = DoubleMLData$new(df_bonus,   y_col = \"inuidur1\",   d_cols = \"tg\",   x_cols = c(     \"female\", \"black\", \"othrace\", \"dep1\", \"dep2\",     \"q2\", \"q3\", \"q4\", \"q5\", \"q6\", \"agelt35\", \"agegt54\",     \"durable\", \"lusd\", \"husd\"   ) ) obj_dml_data_bonus #> ================= DoubleMLData Object ================== #>  #>  #> ------------------ Data summary      ------------------ #> Outcome variable: inuidur1 #> Treatment variable(s): tg #> Covariates: female, black, othrace, dep1, dep2, q2, q3, q4, q5, q6, agelt35, agegt54, durable, lusd, husd #> Instrument(s):  #> No. Observations: 5099"},{"path":"/dev/reference/make_iivm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates data from a interactive IV regression (IIVM) model. ‚Äî make_iivm_data","title":"Generates data from a interactive IV regression (IIVM) model. ‚Äî make_iivm_data","text":"Generates data interactive IV regression (IIVM) model. data generating process defined \\(d_i = 1\\left\\lbrace \\alpha_x Z + v_i > 0 \\right\\rbrace,\\) \\(y_i = \\theta d_i + x_i' \\beta + u_i,\\) \\(Z \\sim \\textstyle{Bernoulli} (0.5)\\) \\(\\left(\\begin{array}{c} u_i \\\\ v_i \\end{array} \\right) \\sim \\mathcal{N}\\left(0, \\left(\\begin{array}{cc} 1 & 0.3 \\\\ 0.3 & 1 \\end{array} \\right) \\right).\\) covariates :\\(x_i \\sim \\mathcal{N}(0, \\Sigma)\\),  \\(\\Sigma\\) matrix entries \\(\\Sigma_{kj} = 0.5^{|j-k|}\\) \\(\\beta\\) dim_x-vector entries \\(\\beta_j=\\frac{1}{j^2}\\). data generating process inspired process used simulation experiment Farbmacher, Gruber Klaa√üen (2020).","code":""},{"path":"/dev/reference/make_iivm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates data from a interactive IV regression (IIVM) model. ‚Äî make_iivm_data","text":"","code":"make_iivm_data(   n_obs = 500,   dim_x = 20,   theta = 1,   alpha_x = 0.2,   return_type = \"DoubleMLData\" )"},{"path":"/dev/reference/make_iivm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates data from a interactive IV regression (IIVM) model. ‚Äî make_iivm_data","text":"n_obs (integer(1))  number observations simulate. dim_x (integer(1))  number covariates. theta (numeric(1))  value causal parameter. alpha_x (numeric(1))  value parameter \\(\\alpha_x\\). return_type (character(1))  \"DoubleMLData\", returns DoubleMLData object. \"data.frame\" returns data.frame(). \"data.table\" returns data.table(). \"matrix\" named list() entries X, y, d z returned. Every entry list matrix() object.  Default \"DoubleMLData\".","code":""},{"path":"/dev/reference/make_iivm_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates data from a interactive IV regression (IIVM) model. ‚Äî make_iivm_data","text":"Farbmacher, H., Guber, R. Klaa√üen, S. (2020). Instrument Validity Tests Causal Forests. MEA Discussion Paper . 13-2020. Available SSRN:doi:10.2139/ssrn.3619201 .","code":""},{"path":"/dev/reference/make_irm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates data from a interactive regression (IRM) model. ‚Äî make_irm_data","title":"Generates data from a interactive regression (IRM) model. ‚Äî make_irm_data","text":"Generates data interactive regression (IRM) model. data generating process defined \\(d_i = 1\\left\\lbrace \\frac{\\exp(c_d x_i' \\beta)}{1+\\exp(c_d x_i' \\beta)} > v_i \\right\\rbrace,\\) \\( y_i = \\theta d_i + c_y x_i' \\beta d_i + \\zeta_i,\\) \\(v_i \\sim \\mathcal{U}(0,1)\\), \\(\\zeta_i \\sim \\mathcal{N}(0,1)\\) covariates \\(x_i \\sim \\mathcal{N}(0, \\Sigma)\\), \\(\\Sigma\\) matrix entries \\(\\Sigma_{kj} = 0.5^{|j-k|}\\). \\(\\beta\\) dim_x-vector entries \\(\\beta_j = \\frac{1}{j^2}\\) constancts \\(c_y\\) \\(c_d\\) given \\( c_y = \\sqrt{\\frac{R_y^2}{(1-R_y^2) \\beta' \\Sigma \\beta}},\\) \\(c_d = \\sqrt{\\frac{(\\pi^2 /3) R_d^2}{(1-R_d^2) \\beta' \\Sigma \\beta}}.\\) data generating process inspired process used simulation experiment (see Appendix P) Belloni et al. (2017).","code":""},{"path":"/dev/reference/make_irm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates data from a interactive regression (IRM) model. ‚Äî make_irm_data","text":"","code":"make_irm_data(   n_obs = 500,   dim_x = 20,   theta = 0,   R2_d = 0.5,   R2_y = 0.5,   return_type = \"DoubleMLData\" )"},{"path":"/dev/reference/make_irm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates data from a interactive regression (IRM) model. ‚Äî make_irm_data","text":"n_obs (integer(1))  number observations simulate. dim_x (integer(1))  number covariates. theta (numeric(1))  value causal parameter. R2_d (numeric(1))  value parameter \\(R_d^2\\). R2_y (numeric(1))  value parameter \\(R_y^2\\). return_type (character(1))  \"DoubleMLData\", returns DoubleMLData object. \"data.frame\" returns data.frame(). \"data.table\" returns data.table(). \"matrix\" named list() entries X, y, d z returned. Every entry list matrix() object.  Default \"DoubleMLData\".","code":""},{"path":"/dev/reference/make_irm_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates data from a interactive regression (IRM) model. ‚Äî make_irm_data","text":"Belloni, ., Chernozhukov, V., Fern√°ndez-Val, . Hansen, C. (2017). Program Evaluation Causal Inference High-Dimensional Data. Econometrica, 85: 233-298.","code":""},{"path":"/dev/reference/make_pliv_CHS2015.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates data from a partially linear IV regression model used in\nChernozhukov, Hansen and Spindler (2015). ‚Äî make_pliv_CHS2015","title":"Generates data from a partially linear IV regression model used in\nChernozhukov, Hansen and Spindler (2015). ‚Äî make_pliv_CHS2015","text":"Generates data partially linear IV regression model used Chernozhukov, Hansen Spindler (2015). data generating process defined \\(z_i = \\Pi x_i + \\zeta_i,\\) \\(d_i = x_i'\\gamma + z_i'\\delta + u_i,\\) \\(y_i = \\alpha d_i + x_i'\\beta + \\epsilon_i,\\) \\(\\left(\\begin{array}{c} \\varepsilon_i \\\\ u_i \\\\ \\zeta_i \\\\ x_i \\end{array} \\right) \\sim \\mathcal{N}\\left(0, \\left(\\begin{array}{cccc} 1 & 0.6 & 0 & 0 \\\\ 0.6 & 1 & 0 & 0 \\\\ 0 & 0 & 0.25 I_{p_n^z} & 0 \\\\ 0 & 0 & 0 & \\Sigma \\end{array} \\right) \\right)\\) \\(\\Sigma\\) \\(p_n^x \\times p_n^x\\) matrix entries \\(\\Sigma_{kj} = 0.5^{|j-k|}\\) \\(I_{p_n^z}\\) \\(p^z_n \\times p^z_n\\) identity matrix. \\(\\beta=\\gamma\\) iis \\(p^x_n\\)-vector entries \\(\\beta_j = \\frac{1}{j^2}\\), \\(\\delta\\) \\(p^z_n\\)-vector entries \\(\\delta_j = \\frac{1}{j^2}\\) \\(\\Pi = (I_{p_n^z}, O_{p_n^z \\times (p_n^x - p_n^z)})\\).","code":""},{"path":"/dev/reference/make_pliv_CHS2015.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates data from a partially linear IV regression model used in\nChernozhukov, Hansen and Spindler (2015). ‚Äî make_pliv_CHS2015","text":"","code":"make_pliv_CHS2015(   n_obs,   alpha = 1,   dim_x = 200,   dim_z = 150,   return_type = \"DoubleMLData\" )"},{"path":"/dev/reference/make_pliv_CHS2015.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates data from a partially linear IV regression model used in\nChernozhukov, Hansen and Spindler (2015). ‚Äî make_pliv_CHS2015","text":"n_obs (integer(1))  number observations simulate. alpha (numeric(1))  value causal parameter. dim_x (integer(1))  number covariates. dim_z (integer(1))  number instruments. return_type (character(1))  \"DoubleMLData\", returns DoubleMLData object. \"data.frame\" returns data.frame(). \"data.table\" returns data.table(). \"matrix\" named list() entries X, y, d z returned. Every entry list matrix() object.  Default \"DoubleMLData\".","code":""},{"path":"/dev/reference/make_pliv_CHS2015.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates data from a partially linear IV regression model used in\nChernozhukov, Hansen and Spindler (2015). ‚Äî make_pliv_CHS2015","text":"data object according choice return_type.","code":""},{"path":"/dev/reference/make_pliv_CHS2015.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates data from a partially linear IV regression model used in\nChernozhukov, Hansen and Spindler (2015). ‚Äî make_pliv_CHS2015","text":"Chernozhukov, V., Hansen, C. Spindler, M. (2015), Post-Selection Post-Regularization Inference Linear Models Many Controls Instruments. American Economic Review: Papers Proceedings, 105 (5): 486-90.","code":""},{"path":"/dev/reference/make_pliv_multiway_cluster_CKMS2021.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates data from a partially linear IV regression model with\nmultiway cluster sample used in Chiang et al. (2021). ‚Äî make_pliv_multiway_cluster_CKMS2021","title":"Generates data from a partially linear IV regression model with\nmultiway cluster sample used in Chiang et al. (2021). ‚Äî make_pliv_multiway_cluster_CKMS2021","text":"Generates data partially linear IV regression model multiway cluster sample used Chiang et al. (2021). data generating process defined \\(Z_{ij} = X_{ij}' \\xi_0 + V_{ij},\\) \\(D_{ij} = Z_{ij}' \\pi_{10} + X_{ij}' \\pi_{20} + v_{ij},\\) \\(Y_{ij} = D_{ij} \\theta + X_{ij}' \\zeta_0 + \\varepsilon_{ij},\\) \\(X_{ij} = (1 - \\omega_1^X - \\omega_2^X) \\alpha_{ij}^X + \\omega_1^X \\alpha_{}^X + \\omega_2^X \\alpha_{j}^X,\\) \\(\\varepsilon_{ij} = (1 - \\omega_1^\\varepsilon - \\omega_2^\\varepsilon) \\alpha_{ij}^\\varepsilon + \\omega_1^\\varepsilon \\alpha_{}^\\varepsilon + \\omega_2^\\varepsilon \\alpha_{j}^\\varepsilon,\\) \\(v_{ij} = (1 - \\omega_1^v - \\omega_2^v) \\alpha_{ij}^v + \\omega_1^v \\alpha_{}^v + \\omega_2^v \\alpha_{j}^v,\\) \\(V_{ij} = (1 - \\omega_1^V - \\omega_2^V) \\alpha_{ij}^V + \\omega_1^V \\alpha_{}^V + \\omega_2^V \\alpha_{j}^V,\\) \\(\\alpha_{ij}^X, \\alpha_{}^X, \\alpha_{j}^X \\sim \\mathcal{N}(0, \\Sigma)\\) \\(\\Sigma\\) \\(p_x \\times p_x\\) matrix entries \\(\\Sigma_{kj} = s_X^{|j-k|}\\). \\(\\left(\\begin{array}{c} \\alpha_{ij}^\\varepsilon \\\\ \\alpha_{ij}^v \\end{array}\\right), \\left(\\begin{array}{c} \\alpha_{}^\\varepsilon \\\\ \\alpha_{}^v \\end{array}\\right), \\left(\\begin{array}{c} \\alpha_{j}^\\varepsilon \\\\ \\alpha_{j}^v \\end{array}\\right) \\sim \\mathcal{N}\\left(0, \\left(\\begin{array}{cc} 1 & s_{\\varepsilon v} \\\\ s_{\\varepsilon v} & 1 \\end{array}\\right) \\right)\\) \\(\\alpha_{ij}^V, \\alpha_{}^V, \\alpha_{j}^V \\sim \\mathcal{N}(0, 1)\\).","code":""},{"path":"/dev/reference/make_pliv_multiway_cluster_CKMS2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates data from a partially linear IV regression model with\nmultiway cluster sample used in Chiang et al. (2021). ‚Äî make_pliv_multiway_cluster_CKMS2021","text":"","code":"make_pliv_multiway_cluster_CKMS2021(   N = 25,   M = 25,   dim_X = 100,   theta = 1,   return_type = \"DoubleMLClusterData\",   ... )"},{"path":"/dev/reference/make_pliv_multiway_cluster_CKMS2021.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates data from a partially linear IV regression model with\nmultiway cluster sample used in Chiang et al. (2021). ‚Äî make_pliv_multiway_cluster_CKMS2021","text":"N (integer(1))  number observations (first dimension). M (integer(1))  number observations (second dimension). dim_X (integer(1))  number covariates. theta (numeric(1))  value causal parameter. return_type (character(1))  \"DoubleMLClusterData\", returns DoubleMLClusterData object. \"data.frame\" returns data.frame(). \"data.table\" returns data.table(). \"matrix\" named list() entries X, y, d, z cluster_vars returned. Every entry list matrix() object.  Default \"DoubleMLClusterData\". ... Additional keyword arguments set non-default values parameters \\(\\pi_{10}=1.0\\), \\(\\omega_X = \\omega_{\\varepsilon} = \\omega_V = \\omega_v = (0.25, 0.25)\\), \\(s_X = s_{\\varepsilon v} = 0.25\\), \\(p_x\\)-vectors \\(\\zeta_0 = \\pi_{20} = \\xi_0\\) default entries \\(\\zeta_{0})_j = 0.5^j\\).","code":""},{"path":"/dev/reference/make_pliv_multiway_cluster_CKMS2021.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates data from a partially linear IV regression model with\nmultiway cluster sample used in Chiang et al. (2021). ‚Äî make_pliv_multiway_cluster_CKMS2021","text":"data object according choice return_type.","code":""},{"path":"/dev/reference/make_pliv_multiway_cluster_CKMS2021.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates data from a partially linear IV regression model with\nmultiway cluster sample used in Chiang et al. (2021). ‚Äî make_pliv_multiway_cluster_CKMS2021","text":"Chiang, H. D., Kato K., Ma, Y. Sasaki, Y. (2021), Multiway Cluster Robust Double/Debiased Machine Learning, Journal Business & Economic Statistics, doi:10.1080/07350015.2021.1895815 , https://arxiv.org/abs/1909.03489.","code":""},{"path":"/dev/reference/make_plr_CCDDHNR2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates data from a partially linear regression model used in\nChernozhukov et al. (2018) ‚Äî make_plr_CCDDHNR2018","title":"Generates data from a partially linear regression model used in\nChernozhukov et al. (2018) ‚Äî make_plr_CCDDHNR2018","text":"Generates data partially linear regression model used Chernozhukov et al. (2018) Figure 1. data generating process defined \\(d_i = m_0(x_i) + s_1 v_i,\\) \\(y_i = \\alpha d_i + g_0(x_i) + s_2 \\zeta_i,\\) \\(v_i \\sim \\mathcal{N}(0,1)\\) \\(\\zeta_i \\sim \\mathcal{N}(0,1),\\). covariates distributed \\(x_i \\sim \\mathcal{N}(0, \\Sigma)\\),  \\(\\Sigma\\) matrix entries \\(\\Sigma_{kj} = 0.7^{|j-k|}\\). nuisance functions given \\(m_0(x_i) = a_0 x_{,1} + a_1 \\frac{\\exp(x_{,3})}{1+\\exp(x_{,3})},\\) \\(g_0(x_i) = b_0 \\frac{\\exp(x_{,1})}{1+\\exp(x_{,1})} + b_1 x_{,3},\\) \\(a_0=1\\), \\(a_1=0.25\\), \\(s_1=1\\), \\(b_0=1\\), \\(b_1=0.25\\), \\(s_2=1\\).","code":""},{"path":"/dev/reference/make_plr_CCDDHNR2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates data from a partially linear regression model used in\nChernozhukov et al. (2018) ‚Äî make_plr_CCDDHNR2018","text":"","code":"make_plr_CCDDHNR2018(   n_obs = 500,   dim_x = 20,   alpha = 0.5,   return_type = \"DoubleMLData\" )"},{"path":"/dev/reference/make_plr_CCDDHNR2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates data from a partially linear regression model used in\nChernozhukov et al. (2018) ‚Äî make_plr_CCDDHNR2018","text":"n_obs (integer(1))  number observations simulate. dim_x (integer(1))  number covariates. alpha (numeric(1))  value causal parameter. return_type (character(1))  \"DoubleMLData\", returns DoubleMLData object. \"data.frame\" returns data.frame(). \"data.table\" returns data.table(). \"matrix\" named list() entries X, y d returned. Every entry list matrix() object.  Default \"DoubleMLData\".","code":""},{"path":"/dev/reference/make_plr_CCDDHNR2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates data from a partially linear regression model used in\nChernozhukov et al. (2018) ‚Äî make_plr_CCDDHNR2018","text":"data object according choice return_type.","code":""},{"path":"/dev/reference/make_plr_CCDDHNR2018.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates data from a partially linear regression model used in\nChernozhukov et al. (2018) ‚Äî make_plr_CCDDHNR2018","text":"Chernozhukov, V., Chetverikov, D., Demirer, M., Duflo, E., Hansen, C., Newey, W. Robins, J. (2018), Double/debiased machine learning treatment structural parameters. Econometrics Journal, 21: C1-C68. doi:10.1111/ectj.12097 .","code":""},{"path":"/dev/reference/make_plr_turrell2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates data from a partially linear regression model used in a blog\narticle by Turrell (2018). ‚Äî make_plr_turrell2018","title":"Generates data from a partially linear regression model used in a blog\narticle by Turrell (2018). ‚Äî make_plr_turrell2018","text":"Generates data partially linear regression model used blog article Turrell (2018). data generating process defined \\(d_i = m_0(x_i' b) + v_i,\\) \\(y_i = \\theta d_i + g_0(x_i' b) + u_i,\\) \\(v_i \\sim \\mathcal{N}(0,1)\\), \\(u_i \\sim \\mathcal{N}(0,1)\\), covariates \\(x_i \\sim \\mathcal{N}(0, \\Sigma)\\),  \\(\\Sigma\\) random symmetric, positive-definite matrix generated clusterGeneration::genPositiveDefMat(). \\(b\\) vector entries \\(b_j=\\frac{1}{j}\\) nuisance functions given \\(m_0(x_i) = \\frac{1}{2 \\pi} \\frac{\\sinh(\\gamma)}{\\cosh(\\gamma) - \\cos(x_i-\\nu)},\\) \\(g_0(x_i) = \\sin(x_i)^2.\\)","code":""},{"path":"/dev/reference/make_plr_turrell2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates data from a partially linear regression model used in a blog\narticle by Turrell (2018). ‚Äî make_plr_turrell2018","text":"","code":"make_plr_turrell2018(   n_obs = 100,   dim_x = 20,   theta = 0.5,   return_type = \"DoubleMLData\",   nu = 0,   gamma = 1 )"},{"path":"/dev/reference/make_plr_turrell2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates data from a partially linear regression model used in a blog\narticle by Turrell (2018). ‚Äî make_plr_turrell2018","text":"n_obs (integer(1))  number observations simulate. dim_x (integer(1))  number covariates. theta (numeric(1))  value causal parameter. return_type (character(1))  \"DoubleMLData\", returns DoubleMLData object. \"data.frame\" returns data.frame(). \"data.table\" returns data.table(). \"matrix\" named list() entries X, y d returned. Every entry list matrix() object.  Default \"DoubleMLData\". nu (numeric(1))  value parameter \\(\\nu\\). Default 0. gamma (numeric(1))  value parameter \\(\\gamma\\). Default 1.","code":""},{"path":"/dev/reference/make_plr_turrell2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates data from a partially linear regression model used in a blog\narticle by Turrell (2018). ‚Äî make_plr_turrell2018","text":"data object according choice return_type.","code":""},{"path":"/dev/reference/make_plr_turrell2018.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates data from a partially linear regression model used in a blog\narticle by Turrell (2018). ‚Äî make_plr_turrell2018","text":"Turrell, . (2018), Econometrics Python part - Double machine learning, Markov Wanderer: blog economics, science, coding data. http://aeturrell.com/2018/02/10/econometrics--python-partI-ML/.","code":""}]
